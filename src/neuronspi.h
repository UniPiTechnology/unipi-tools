/*
 * UniPi Neuron tty serial driver - Copyright (C) 2017 UniPi Technologies
 * Author: Tomas Knot <tomasknot@gmail.com>
 *
 *  Based on the SC16IS7xx driver by Jon Ringle <jringle@gridpoint.com>,
 *  which was in turn based on max310x.c, by Alexander Shiyan <shc_work@mail.ru>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 */

#ifndef NEURONSPI_H_
#define NEURONSPI_H_

#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
#define NEURONSPI_SCHED_REQUIRED 0 // Older kernels do not require sched/types to be specifically imported

#define NEURONSPI_MAJOR_VERSIONSTRING "Development Beta Version 0.02:12:02:2018"

#include <linux/bitops.h>
#include <linux/clk.h>
#include <linux/delay.h>
#include <linux/device.h>
#include <linux/gpio.h>
#include <linux/gpio/driver.h>
#include <linux/i2c.h>
#include <linux/iio/iio.h>
#include <uapi/linux/iio/types.h>
#include <linux/iio/sysfs.h>
#include <linux/module.h>
#include <linux/of.h>
#include <linux/of_device.h>
#include <linux/regmap.h>
#include <linux/serial_core.h>
#include <linux/serial.h>
#include <linux/tty.h>
#include <linux/tty_flip.h>
#include <linux/spi/spi.h>
#include <linux/leds.h>
#include <linux/uaccess.h>
#include <asm/termbits.h>
#include <asm/gpio.h>

/********************************
 * HW Constants Data Structures *
 ********************************/

struct neuronspi_board_entry {
	u16		index;
	u16		lower_board_id;
	u16		upper_board_id;
	u16		data_register_count;
	u16		config_register_count;
	struct neuronspi_board_combination *definition;
};

struct neuronspi_register_block
{
	u32 	starting_register;
	u32 	register_count;
	u32		*register_flags;
};

struct neuronspi_board_features
{
	u32		do_count;
	u32		ro_count;
	u32		ds_count;
	u32		di_count;
	u32		led_count;
	u32		stm_ai_count;
	u32		stm_ao_count;
	u32		sec_ai_count;
	u32		sec_ao_count;
	u32		uart_master_count;
	u32		uart_slave_count;
	u32		pwm_channel_count;
	u32		wd_count;
	u32		extension_sys_count;
	u32		light_count;
	u32		owire_count;
};

struct neuronspi_board_regstart_table
{
	u32		do_val_reg;
	u32		do_val_coil;
	u32		do_pwm_reg;
	u32		do_pwm_ps_reg;
	u32		do_pwm_c_reg;
	u32		di_val_reg;
	u32		di_counter_reg;
	u32		di_direct_reg;
	u32		di_deboun_reg;
	u32		di_polar_reg;
	u32		di_toggle_reg;
	u32		uart_queue_reg;
	u32		uart_conf_reg;
	u32		uart_address_reg;
	u32		led_val_coil;
	u32		led_val_reg;
	u32		wd_val_reg;
	u32		wd_timeout_reg;
	u32		wd_nv_sav_coil;
	u32		wd_reset_coil;
	u32		reg_start_reg;
	u32		ro_val_reg;
	u32		ro_val_coil;
	u32		vref_inp;
	u32		vref_int;
	u32		stm_ao_val_reg;
	u32		stm_ao_mode_reg;
	u32		stm_ao_vol_err;
	u32		stm_ao_vol_off;
	u32		stm_ao_curr_err;
	u32		stm_ao_curr_off;
	u32		stm_ai_val_reg;
	u32		stm_ai_mode_reg;
	u32		stm_ai_curr_err;
	u32		stm_ai_curr_off;
	u32		stm_ai_vol_err;
	u32		stm_ai_vol_off;
	u32		stm_aio_val_reg;
	u32		stm_aio_vol_err;
	u32		stm_aio_vol_off;
	u32		sec_ao_val_reg;
	u32		sec_ao_mode_reg;
	u32		sec_ai_val_reg;
	u32		sec_ai_mode_reg;
	u32		sys_serial_num;
	u32		sys_hw_ver;
	u32		sys_hw_flash_ver;
	u32		sys_sw_ver;
};

struct neuronspi_board_combination
{
	u32									combination_board_id;
	uint16_t							lower_board_id;
	uint16_t							upper_board_id;
	u32 								block_count;
	size_t								name_length;
	const char*							combination_name;
	struct neuronspi_board_features		features;
	u32					 			 	*blocks;
};

struct neuronspi_model_definition
{
	size_t								eeprom_length;
	const char* 						eeprom_name;
	size_t								name_length;
	const char*							model_name;
	u32									combination_count;
	struct neuronspi_board_combination *combinations;
};

/***************
 * Definitions *
 ***************/

#define NEURONSPI_MAX_DEVS				3
#define NEURONSPI_MAX_UART				128
#define NEURONSPI_BUFFER_MAX			1152
#define NEURONSPI_HEADER_LENGTH 		10
#define NEURONSPI_FIRST_MESSAGE_LENGTH	6
#define NEURONSPI_EDGE_DELAY			10
#define NEURONSPI_B_PER_WORD 			8
#define NEURONSPI_DEFAULT_FREQ			600000
#define NEURONSPI_COMMON_FREQ			12000000
#define NEURONSPI_SLOWER_FREQ			8000000
#define NEURONSPI_MAX_TX				62
#define NEURONSPI_MAX_BAUD				115200
#define NEURONSPI_FIFO_SIZE				256
#define NEURONSPI_DETAILED_DEBUG		0
#define NEURONSPI_LAST_TRANSFER_DELAY	40


#define NEURON_DEVICE_NAME 				"neuronspi"
#define NEURON_DEVICE_CLASS 			"modbus_spi"
#define NEURON_DRIVER_NAME				"NEURONSPI"
#define PORT_NEURONSPI					184

#define STRICT_RESERVING
#define NEURONSPI_ALWAYS_EXPORT

#define NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(X)	((((X) + 15) >> 4) << 1)

#define NEURONSPI_NO_INTERRUPT_MODELS_LEN 				3
const uint16_t NEURONSPI_NO_INTERRUPT_MODELS[NEURONSPI_NO_INTERRUPT_MODELS_LEN] = {
		0xb10, 0xc10, 0xf10
};

#define NEURONSPI_SLOWER_MODELS_LEN 					3
const uint16_t NEURONSPI_SLOWER_MODELS[NEURONSPI_SLOWER_MODELS_LEN] = {
		0xb10, 0xc10, 0xf10
};

#define NEURONSPI_PROBE_MESSAGE_LEN						22
const u8 NEURONSPI_PROBE_MESSAGE[NEURONSPI_PROBE_MESSAGE_LEN] = {
		0x04, 0x0e, 0xe8, 0x03, 0xa0, 0xdd,
		0x04, 0x00, 0xe8, 0x03,	0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,	0x12, 0x16
};

#define NEURONSPI_UART_PROBE_MESSAGE_LEN				6
const u8 NEURONSPI_UART_PROBE_MESSAGE[NEURONSPI_UART_PROBE_MESSAGE_LEN] = {
		0xfa, 0x00, 0x55, 0x0e, 0xb6, 0x0a
};

#define NEURONSPI_SPI_UART_SHORT_MESSAGE_LEN			6
const u8 NEURONSPI_SPI_UART_SHORT_MESSAGE[NEURONSPI_SPI_UART_SHORT_MESSAGE_LEN] = {
		0x41, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define NEURONSPI_SPI_UART_LONG_MESSAGE_LEN				8
const u8 NEURONSPI_SPI_UART_LONG_MESSAGE[NEURONSPI_SPI_UART_LONG_MESSAGE_LEN] = {
		0x64, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00
};

#define NEURONSPI_SPI_UART_READ_MESSAGE_LEN				14
const u8 NEURONSPI_SPI_UART_READ_MESSAGE[NEURONSPI_SPI_UART_READ_MESSAGE_LEN] = {
		0x65, 0x06, 0x00, 0x00, 0x44, 0x69,
		0x65, 0x03, 0x00, 0x00, 0x00, 0x05,
		0x6a, 0x0c
};

#define NEURONSPI_SPI_IRQ_SET_MESSAGE_LEN				14
const u8 NEURONSPI_SPI_IRQ_SET_MESSAGE[NEURONSPI_SPI_UART_READ_MESSAGE_LEN] = {
		0x06, 0x06, 0xef, 0x03, 0x00, 0x00,
		0x06, 0x01, 0xef, 0x03, 0x05, 0x00,
		0x00, 0x00
};

#define NEURONSPI_SPI_UART_GET_CFLAG_MESSAGE_LEN 		16
const u8 NEURONSPI_SPI_UART_GET_CFLAG_MESSAGE[NEURONSPI_SPI_UART_GET_CFLAG_MESSAGE_LEN] = {
		0x04, 0x08, 0xf4, 0x01, 0x00, 0x00,
		0x04, 0x02, 0xf4, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
};

#define NEURONSPI_SPI_UART_GET_LDISC_MESSAGE_LEN 		16
const u8 NEURONSPI_SPI_UART_GET_LDISC_MESSAGE[NEURONSPI_SPI_UART_GET_LDISC_MESSAGE_LEN] = {
		0x04, 0x08, 0xf6, 0x01, 0x00, 0x00,
		0x04, 0x02, 0xf6, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
};

#define NEURONSPI_SPI_UART_SET_CFLAG_MESSAGE_LEN		16
const u8 NEURONSPI_SPI_UART_SET_CFLAG_MESSAGE[NEURONSPI_SPI_UART_SET_CFLAG_MESSAGE_LEN] = {
		0x06, 0x08, 0xf4, 0x01, 0x00, 0x00,
		0x06, 0x02, 0xf4, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
};

#define NEURONSPI_SPI_LED_SET_MESSAGE_LEN				6
const u8 NEURONSPI_SPI_LED_SET_MESSAGE[NEURONSPI_SPI_LED_SET_MESSAGE_LEN] = {
		0x05, 0x00, 0x08, 0x00, 0x00, 0x00
};

#define NEURONSPI_CRC16TABLE_LEN						256
const uint16_t NEURONSPI_CRC16TABLE[NEURONSPI_CRC16TABLE_LEN] = {
    0,  1408,  3968,  2560,  7040,  7680,  5120,  4480, 13184, 13824, 15360,
14720, 10240, 11648, 10112,  8704, 25472, 26112, 27648, 27008, 30720, 32128,
30592, 29184, 20480, 21888, 24448, 23040, 19328, 19968, 17408, 16768, 50048,
50688, 52224, 51584, 55296, 56704, 55168, 53760, 61440, 62848, 65408, 64000,
60288, 60928, 58368, 57728, 40960, 42368, 44928, 43520, 48000, 48640, 46080,
45440, 37760, 38400, 39936, 39296, 34816, 36224, 34688, 33280, 33665, 34305,
35841, 35201, 38913, 40321, 38785, 37377, 45057, 46465, 49025, 47617, 43905,
44545, 41985, 41345, 57345, 58753, 61313, 59905, 64385, 65025, 62465, 61825,
54145, 54785, 56321, 55681, 51201, 52609, 51073, 49665, 16385, 17793, 20353,
18945, 23425, 24065, 21505, 20865, 29569, 30209, 31745, 31105, 26625, 28033,
26497, 25089,  9089,  9729, 11265, 10625, 14337, 15745, 14209, 12801,  4097,
 5505,  8065,  6657,  2945,  3585,  1025,   385,   899,  1539,  3075,  2435,
 6147,  7555,  6019,  4611, 12291, 13699, 16259, 14851, 11139, 11779,  9219,
 8579, 24579, 25987, 28547, 27139, 31619, 32259, 29699, 29059, 21379, 22019,
23555, 22915, 18435, 19843, 18307, 16899, 49155, 50563, 53123, 51715, 56195,
56835, 54275, 53635, 62339, 62979, 64515, 63875, 59395, 60803, 59267, 57859,
41859, 42499, 44035, 43395, 47107, 48515, 46979, 45571, 36867, 38275, 40835,
39427, 35715, 36355, 33795, 33155, 32770, 34178, 36738, 35330, 39810, 40450,
37890, 37250, 45954, 46594, 48130, 47490, 43010, 44418, 42882, 41474, 58242,
58882, 60418, 59778, 63490, 64898, 63362, 61954, 53250, 54658, 57218, 55810,
52098, 52738, 50178, 49538, 17282, 17922, 19458, 18818, 22530, 23938, 22402,
20994, 28674, 30082, 32642, 31234, 27522, 28162, 25602, 24962,  8194,  9602,
12162, 10754, 15234, 15874, 13314, 12674,  4994,  5634,  7170,  6530,  2050,
 3458,  1922,   514
};

/******************
 * HW Definitions *
 ******************/
// Lower Boards:
#define NEURONSPI_BOARD_LOWER_B1000_ID		0
#define NEURONSPI_BOARD_LOWER_E8DI8RO_ID	1
#define NEURONSPI_BOARD_LOWER_E14RO_ID		2
#define NEURONSPI_BOARD_LOWER_E16DI_ID		3
#define NEURONSPI_BOARD_LOWER_E4AI4AO_ID	11
#define NEURONSPI_BOARD_LOWER_B485_ID		13
#define NEURONSPI_BOARD_LOWER_E4LIGHT_ID	14


// Upper Boards:
#define NEURONSPI_BOARD_UPPER_NONE_ID		0
#define NEURONSPI_BOARD_UPPER_P11DIR485_ID	1
#define NEURONSPI_BOARD_UPPER_U14RO_ID		2
#define NEURONSPI_BOARD_UPPER_U14DI_ID		3
#define NEURONSPI_BOARD_UPPER_P6DI5RO_ID	4
#define NEURONSPI_BOARD_UPPER_U6DI5RO_ID	5

// Register function codes:
#define NEURONSPI_FUNGROUP_DI					0
#define NEURONSPI_REGFUN_DI_READ			0 | NEURONSPI_FUNGROUP_DI << 8
#define NEURONSPI_REGFUN_DI_COUNTER_LOWER	1 | NEURONSPI_FUNGROUP_DI << 8
#define NEURONSPI_REGFUN_DI_COUNTER_UPPER	2 | NEURONSPI_FUNGROUP_DI << 8
#define NEURONSPI_REGFUN_DI_DEBOUNCE		3 | NEURONSPI_FUNGROUP_DI << 8
#define NEURONSPI_REGFUN_DS_ENABLE			4 | NEURONSPI_FUNGROUP_DI << 8
#define NEURONSPI_REGFUN_DS_POLARITY		5 | NEURONSPI_FUNGROUP_DI << 8
#define NEURONSPI_REGFUN_DS_TOGGLE			6 | NEURONSPI_FUNGROUP_DI << 8

#define NEURONSPI_FUNGROUP_DO					1
#define NEURONSPI_REGFUN_DO_RW				0 | NEURONSPI_FUNGROUP_DO << 8

#define NEURONSPI_FUNGROUP_AO_BRAIN				2
#define NEURONSPI_REGFUN_AO_BRAIN			0 | NEURONSPI_FUNGROUP_AO_BRAIN << 8
#define NEURONSPI_REGFUN_AO_BRAIN_MODE		1 | NEURONSPI_FUNGROUP_AO_BRAIN << 8
#define NEURONSPI_REGFUN_AO_BRAIN_V_ERR		2 | NEURONSPI_FUNGROUP_AO_BRAIN << 8
#define NEURONSPI_REGFUN_AO_BRAIN_V_OFF		3 | NEURONSPI_FUNGROUP_AO_BRAIN << 8
#define NEURONSPI_REGFUN_AO_BRAIN_I_ERR 	4 | NEURONSPI_FUNGROUP_AO_BRAIN << 8
#define NEURONSPI_REGFUN_AO_BRAIN_I_OFF 	5 | NEURONSPI_FUNGROUP_AO_BRAIN << 8

#define NEURONSPI_FUNGROUP_AI_BRAIN				3
#define NEURONSPI_REGFUN_AI_BRAIN			0 | NEURONSPI_FUNGROUP_AI_BRAIN << 8
#define NEURONSPI_REGFUN_AIO_BRAIN			1 | NEURONSPI_FUNGROUP_AI_BRAIN << 8
#define NEURONSPI_REGFUN_AI_BRAIN_MODE		2 | NEURONSPI_FUNGROUP_AI_BRAIN << 8
#define NEURONSPI_REGFUN_AI_BRAIN_V_ERR		3 | NEURONSPI_FUNGROUP_AI_BRAIN << 8
#define NEURONSPI_REGFUN_AI_BRAIN_V_OFF		4 | NEURONSPI_FUNGROUP_AI_BRAIN << 8
#define NEURONSPI_REGFUN_AI_BRAIN_I_ERR		5 | NEURONSPI_FUNGROUP_AI_BRAIN << 8
#define NEURONSPI_REGFUN_AI_BRAIN_I_OFF		6 | NEURONSPI_FUNGROUP_AI_BRAIN << 8
#define NEURONSPI_REGFUN_AIO_BRAIN_ERR		7 | NEURONSPI_FUNGROUP_AI_BRAIN << 8
#define NEURONSPI_REGFUN_AIO_BRAIN_OFF		8 | NEURONSPI_FUNGROUP_AI_BRAIN << 8

#define NEURONSPI_FUNGROUP_SYSTEM				4
#define NEURONSPI_REGFUN_V_REF_INT			0 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_V_REF_INP			1 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_LED_RW				2 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_SW_VER 			3 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_DIDO_COUNT			4 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_UAIO_COUNT			5 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_HW_VER				6 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_FLASH_HW_VER 		7 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_SERIAL_NR_LOWER	8 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_SERIAL_NR_UPPER	9 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_INTERRUPTS			10 | NEURONSPI_FUNGROUP_SYSTEM << 8
#define NEURONSPI_REGFUN_NONE_TEST			11 | NEURONSPI_FUNGROUP_SYSTEM << 8

#define NEURONSPI_FUNGROUP_MWD					5
#define NEURONSPI_REGFUN_MWD_TO				0 | NEURONSPI_FUNGROUP_MWD << 8
#define NEURONSPI_REGFUN_MWD_STATUS			1 | NEURONSPI_FUNGROUP_MWD << 8

#define NEURONSPI_FUNGROUP_PWM					6
#define NEURONSPI_REGFUN_PWM_DUTY			0 | NEURONSPI_FUNGROUP_PWM << 8
#define NEURONSPI_REGFUN_PWM_PRESCALE		1 | NEURONSPI_FUNGROUP_PWM << 8
#define NEURONSPI_REGFUN_PWM_CYCLE			2 | NEURONSPI_FUNGROUP_PWM << 8


#define NEURONSPI_FUNGROUP_RS485				7
#define NEURONSPI_REGFUN_TX_QUEUE_LEN		0 | NEURONSPI_FUNGROUP_RS485 << 8
#define NEURONSPI_REGFUN_RS485_CONFIG		1 | NEURONSPI_FUNGROUP_RS485 << 8
#define NEURONSPI_REGFUN_RS485_ADDRESS		2 | NEURONSPI_FUNGROUP_RS485 << 8

#define NEURONSPI_FUNGROUP_AO_VER2				8
#define NEURONSPI_REGFUN_AO_VER2_RW			0 | NEURONSPI_FUNGROUP_AO_VER2 << 8

#define NEURONSPI_FUNGROUP_AI_VER2				9
#define NEURONSPI_REGFUN_AI_VER2_READ_LOWER	0 | NEURONSPI_FUNGROUP_AI_VER2 << 8
#define NEURONSPI_REGFUN_AI_VER2_READ_UPPER	0 | NEURONSPI_FUNGROUP_AI_VER2 << 8
#define NEURONSPI_REGFUN_AI_VER2_MODE		1 | NEURONSPI_FUNGROUP_AI_VER2 << 8

// Register access flags:
#define NEURONSPI_REGFLAG_ACC_NEVER	0
#define NEURONSPI_REGFLAG_ACC_AFAP	0x1 << 16
#define NEURONSPI_REGFLAG_ACC_10HZ 	0x2 << 16
#define NEURONSPI_REGFLAG_ACC_1HZ   0x3 << 16
#define NEURONSPI_REGFLAG_ACC_6SEC  0x4 << 16
#define NEURONSPI_REGFLAG_ACC_1MIN  0x5 << 16
#define NEURONSPI_REGFLAG_ACC_15MIN 0x6 << 16
#define NEURONSPI_REGFLAG_ACC_ONCE 	0x7 << 16

// Register system flags:
#define NEURONSPI_REGFLAG_SYS_READ_ONLY	0x10 << 24

#define NEURONSPI_IIO_AI_STM_MODE_VOLTAGE 0x0
#define NEURONSPI_IIO_AI_STM_MODE_CURRENT 0x1
#define NEURONSPI_IIO_AI_STM_MODE_RESISTANCE 0x3

/*********************
 * Board Definitions *
 *********************/

// B_1000 (S103)
#define NEURONSPI_BOARD_B1000_HW_DEFINITION_BLOCK_SIZE 57
static u32 NEURONSPI_BOARD_B1000_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_B1000_HW_DEFINITION_BLOCK_SIZE] = {
		0, 21,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 1
		NEURONSPI_REGFUN_AO_BRAIN | NEURONSPI_REGFLAG_ACC_AFAP,											// 2
		NEURONSPI_REGFUN_AI_BRAIN | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,   	// 3
		NEURONSPI_REGFUN_AIO_BRAIN | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 4
		NEURONSPI_REGFUN_V_REF_INP | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 5
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 6
		NEURONSPI_REGFUN_TX_QUEUE_LEN | NEURONSPI_REGFLAG_ACC_10HZ,										// 7
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 8
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 9
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 10
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 11
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 12
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 13
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 14
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 15
		NEURONSPI_REGFUN_PWM_DUTY | NEURONSPI_REGFLAG_ACC_6SEC, 										// 16
		NEURONSPI_REGFUN_PWM_DUTY | NEURONSPI_REGFLAG_ACC_6SEC,											// 17
		NEURONSPI_REGFUN_PWM_DUTY | NEURONSPI_REGFLAG_ACC_6SEC,											// 18
		NEURONSPI_REGFUN_PWM_DUTY | NEURONSPI_REGFLAG_ACC_6SEC,											// 19
		NEURONSPI_REGFUN_LED_RW | NEURONSPI_REGFLAG_ACC_AFAP, 											// 20
		1000, 32, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE  | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE,										// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DS_ENABLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1014
		NEURONSPI_REGFUN_DS_POLARITY | NEURONSPI_REGFLAG_ACC_1HZ,										// 1015
		NEURONSPI_REGFUN_DS_TOGGLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1016
		NEURONSPI_REGFUN_PWM_PRESCALE | NEURONSPI_REGFLAG_ACC_1HZ,							    		// 1017
		NEURONSPI_REGFUN_PWM_CYCLE | NEURONSPI_REGFLAG_ACC_1HZ,							    			// 1018
		NEURONSPI_REGFUN_AO_BRAIN_MODE | NEURONSPI_REGFLAG_ACC_1HZ,										// 1019
		NEURONSPI_REGFUN_AO_BRAIN_V_ERR | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1020
		NEURONSPI_REGFUN_AO_BRAIN_V_OFF | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1021
		NEURONSPI_REGFUN_AO_BRAIN_I_ERR | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1022
		NEURONSPI_REGFUN_AO_BRAIN_I_OFF | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY, // 1023
		NEURONSPI_REGFUN_AI_BRAIN_MODE | NEURONSPI_REGFLAG_ACC_1HZ,										// 1024
		NEURONSPI_REGFUN_AI_BRAIN_V_ERR | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY, // 1025
		NEURONSPI_REGFUN_AI_BRAIN_V_OFF | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1026
		NEURONSPI_REGFUN_AI_BRAIN_I_ERR | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1027
		NEURONSPI_REGFUN_AI_BRAIN_I_OFF | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1028
		NEURONSPI_REGFUN_AIO_BRAIN_OFF | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1029
		NEURONSPI_REGFUN_AIO_BRAIN_ERR | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,  // 1030
		NEURONSPI_REGFUN_RS485_CONFIG | NEURONSPI_REGFLAG_ACC_6SEC										// 1031
};

#define NEURONSPI_BOARD_B1000_HW_FEATURES {	\
		.do_count =					  4,	\
		.ro_count =					  0,	\
		.ds_count =					  4,	\
		.di_count =					  4,	\
		.led_count =				  4,	\
		.stm_ai_count =				  1,	\
		.stm_ao_count =				  1,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  1,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  4,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  0,	\
		.light_count = 				  0,	\
		.owire_count =				  1,    \
}

#define NEURONSPI_BOARD_B1000_HW_DEFINITION { \
		.combination_board_id = 	0, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_B1000_ID, \
 		.upper_board_id = 			NEURONSPI_BOARD_UPPER_NONE_ID, \
		.block_count = 				NEURONSPI_BOARD_B1000_HW_DEFINITION_BLOCK_SIZE, \
		.name_length =				6, \
		.combination_name =			"B_1000", \
		.features =					NEURONSPI_BOARD_B1000_HW_FEATURES, \
		.blocks = 					NEURONSPI_BOARD_B1000_HW_DEFINITION_BLOCK \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_B1000_HW_COMBINATION[] = {NEURONSPI_BOARD_B1000_HW_DEFINITION};

// E-8Di8Ro (M103)
#define NEURONSPI_BOARD_E8DI8RO_HW_DEFINITION_BLOCK_SIZE 44
static u32 NEURONSPI_BOARD_E8DI8RO_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E8DI8RO_HW_DEFINITION_BLOCK_SIZE] = {
		0, 19,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 1
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 2
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 3
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 4
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 5
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 6
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 7
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 8
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 9
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 10
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 11
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 12
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 13
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 14
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 15
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 16
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 17
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 18
		1000, 17, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1015
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1016
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1017
		NEURONSPI_REGFUN_DS_ENABLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1018
		NEURONSPI_REGFUN_DS_POLARITY | NEURONSPI_REGFLAG_ACC_1HZ,										// 1019
		NEURONSPI_REGFUN_DS_TOGGLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1020
};

#define NEURONSPI_BOARD_E8DI8RO_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  8,	\
		.ds_count =					  8,	\
		.di_count =					  8,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  0,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E8DI8RO_HW_DEFINITION { \
		.combination_board_id = 	1, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E8DI8RO_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_NONE_ID, \
		.block_count = 				NEURONSPI_BOARD_E8DI8RO_HW_DEFINITION_BLOCK_SIZE, \
		.name_length =				8, \
		.combination_name =			"E_8Di8Ro", \
		.blocks = 					NEURONSPI_BOARD_E8DI8RO_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E8DI8RO_HW_FEATURES	\
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E8DI8RO_HW_COMBINATION[] = {NEURONSPI_BOARD_E8DI8RO_HW_DEFINITION};

// E-14Ro
#define NEURONSPI_BOARD_E14RO_HW_DEFINITION_BLOCK_SIZE 15
static u32 NEURONSPI_BOARD_E14RO_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E14RO_HW_DEFINITION_BLOCK_SIZE] = {
		0, 1,	// Register block beginning and size
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 0
		1000, 10,
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE,											// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE, 										// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE, 										// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE, 											// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE, 									// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE,									// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE,									// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE,										// 1009
};

#define NEURONSPI_BOARD_E14RO_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  14,	\
		.ds_count =					  0,	\
		.di_count =					  0,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  0,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E14RO_HW_DEFINITION { \
		.combination_board_id = 	2, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E14RO_ID, \
		.upper_board_id =			NEURONSPI_BOARD_UPPER_NONE_ID, \
		.block_count =				NEURONSPI_BOARD_E14RO_HW_DEFINITION_BLOCK_SIZE, \
		.name_length =				6, \
		.combination_name =			"E_14Ro", \
		.blocks =					NEURONSPI_BOARD_E14RO_HW_DEFINITION_BLOCK, \
		.features = 				NEURONSPI_BOARD_E14RO_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E14RO_HW_COMBINATION[] = {NEURONSPI_BOARD_E14RO_HW_DEFINITION};

// E-16Di
#define NEURONSPI_BOARD_E16DI_HW_DEFINITION_BLOCK_SIZE 15
static u32 NEURONSPI_BOARD_E16DI_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E16DI_HW_DEFINITION_BLOCK_SIZE] = {
		0, 1,	// Register block beginning and size
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 0
		1000, 10,
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE,											// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE, 										// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE, 										// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE, 											// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE, 									// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE,									// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE,									// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE,										// 1009
};

#define NEURONSPI_BOARD_E16DI_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  0,	\
		.ds_count =					  0,	\
		.di_count =					  16,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  0,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E16DI_HW_DEFINITION { \
		.combination_board_id = 	3, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E16DI_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_NONE_ID, \
		.block_count = 				NEURONSPI_BOARD_E16DI_HW_DEFINITION_BLOCK_SIZE, \
		.name_length =				6, \
		.combination_name =			"E_16Di", \
		.blocks = 					NEURONSPI_BOARD_E16DI_HW_DEFINITION_BLOCK, \
		.features = 				NEURONSPI_BOARD_E16DI_HW_FEATURES \
}

static struct neuronspi_board_combination NEURONSPI_BOARD_E16DI_HW_COMBINATION[] = {NEURONSPI_BOARD_E16DI_HW_DEFINITION};

// E-8Di8Ro_P-11DiR485 (xS10)
#define NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_DEFINITION_BLOCK_SIZE 47
static u32 NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_DEFINITION_BLOCK_SIZE] = {
		0, 20,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 1
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 2
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 3
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 4
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 5
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 6
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 7
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 8
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 9
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 10
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 11
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 12
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 13
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 14
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 15
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 16
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 17
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 18
		NEURONSPI_REGFUN_LED_RW | NEURONSPI_REGFLAG_ACC_1HZ,											// 19
		1000, 23, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE,											// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE, 										// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE, 										// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE, 											// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE, 									// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE,									// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE,									// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE,										// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1015
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1016
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1017
		NEURONSPI_REGFUN_DS_ENABLE   | NEURONSPI_REGFLAG_ACC_1HZ,										// 1018
		NEURONSPI_REGFUN_DS_POLARITY | NEURONSPI_REGFLAG_ACC_1HZ,										// 1019
		NEURONSPI_REGFUN_DS_TOGGLE   | NEURONSPI_REGFLAG_ACC_1HZ,										// 1020
		NEURONSPI_REGFUN_RS485_CONFIG | NEURONSPI_REGFLAG_ACC_6SEC,										// 1021
		NEURONSPI_REGFUN_RS485_ADDRESS | NEURONSPI_REGFLAG_ACC_6SEC										// 1022
};

#define NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  8,	\
		.ds_count =					  8,	\
		.di_count =					  8,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  1,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  1,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_DEFINITION { \
		.combination_board_id = 	4, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E8DI8RO_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_P11DIR485_ID, \
		.block_count = 				NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_DEFINITION_BLOCK_SIZE, \
		.name_length =				19, \
		.combination_name =			"E_8Di8Ro_P_11DiR485", \
		.blocks = 					NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_COMBINATION[] = {NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_DEFINITION};

// E-14Ro_P-11DiR485 (xS40)
#define NEURONSPI_BOARD_E14ROP11DIR485_HW_DEFINITION_BLOCK_SIZE 71
static u32 NEURONSPI_BOARD_E14ROP11DIR485_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E14ROP11DIR485_HW_DEFINITION_BLOCK_SIZE] = {
		0, 36,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 1
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 2
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 3
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 4
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 5
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 6
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 7
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 8
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 9
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 10
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 11
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 12
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 13
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 14
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 15
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 16
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 17
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 18
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 19
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 20
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 21
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 22
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 23
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 24
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 25
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 26
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 27
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 28
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 29
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 30
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 31
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 32
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 33
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 34
		NEURONSPI_REGFUN_LED_RW | NEURONSPI_REGFLAG_ACC_1HZ,		                					// 35
		1000, 31, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE,											// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE, 										// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE, 										// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE, 											// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE, 									// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE,									// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE,									// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE,										// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1015
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1016
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1017
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1018
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1019
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1020
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1021
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1022
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1023
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1024
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1025
		NEURONSPI_REGFUN_DS_ENABLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1026
		NEURONSPI_REGFUN_DS_POLARITY | NEURONSPI_REGFLAG_ACC_1HZ,										// 1027
		NEURONSPI_REGFUN_DS_TOGGLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1028
		NEURONSPI_REGFUN_RS485_CONFIG | NEURONSPI_REGFLAG_ACC_6SEC,										// 1029
		NEURONSPI_REGFUN_RS485_ADDRESS | NEURONSPI_REGFLAG_ACC_6SEC										// 1030
};

#define NEURONSPI_BOARD_E14ROP11DIR485_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  14,	\
		.ds_count =					  8,	\
		.di_count =					  8,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  1,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  1,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E14ROP11DIR485_HW_DEFINITION { \
		.combination_board_id = 	5, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E14RO_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_P11DIR485_ID, \
		.name_length =				17, \
		.combination_name =			"E_14Ro_P_11DiR485", \
		.block_count = 				NEURONSPI_BOARD_E14ROP11DIR485_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E14ROP11DIR485_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E14ROP11DIR485_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E14ROP11DIR485_HW_COMBINATION[] = {NEURONSPI_BOARD_E14ROP11DIR485_HW_DEFINITION};

// E-16Di_P-11DiR485 (xS30)
#define NEURONSPI_BOARD_E16DIP11DIR485_HW_DEFINITION_BLOCK_SIZE 92
static u32 NEURONSPI_BOARD_E16DIP11DIR485_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E16DIP11DIR485_HW_DEFINITION_BLOCK_SIZE] = {
		0, 52,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 0
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC,									 	// 2
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 3
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 4
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 5
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 6
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 7
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 8
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 9
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 10
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 11
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 12
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 13
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 14
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 15
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 16
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 17
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 18
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 19
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 20
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 21
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 22
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 23
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 24
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 25
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 26
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 27
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 28
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 29
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 30
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 31
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 32
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 33
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 34
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 35
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 36
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 37
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 38
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 39
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 40
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 41
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 42
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 43
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 44
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 45
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 46
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 47
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 48
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 49
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 50
		NEURONSPI_REGFUN_LED_RW | NEURONSPI_REGFLAG_ACC_1HZ,											// 51
		1000, 36, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1015
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1016
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1017
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1018
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1019
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1020
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1021
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1022
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1023
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1024
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1025
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1026
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1027
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1028
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1029
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1030
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1031
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1032
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1033
		NEURONSPI_REGFUN_RS485_CONFIG | NEURONSPI_REGFLAG_ACC_6SEC,										// 1034
		NEURONSPI_REGFUN_RS485_ADDRESS | NEURONSPI_REGFLAG_ACC_6SEC										// 1035
};

#define NEURONSPI_BOARD_E16DIP11DIR485_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  0,	\
		.ds_count =					  0,	\
		.di_count =					  23,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  1,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  1,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E16DIP11DIR485_HW_DEFINITION { \
		.combination_board_id = 	6, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E16DI_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_P11DIR485_ID, \
		.name_length =				17, \
		.combination_name =			"E_16Di_P_11DiR485", \
		.block_count = 				NEURONSPI_BOARD_E16DIP11DIR485_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E16DIP11DIR485_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E16DIP11DIR485_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E16DIP11DIR485_HW_COMBINATION[] = {NEURONSPI_BOARD_E16DIP11DIR485_HW_DEFINITION};

// E-14Ro_U-14Ro (M403)
#define NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION_BLOCK_SIZE 17
static u32 NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION_BLOCK_SIZE] = {
		0, 3,	// Register block beginning and size
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 1
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 2
		1000, 10, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
};

#define NEURONSPI_BOARD_E14ROU14RO_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  28,	\
		.ds_count =					  0,	\
		.di_count =					  0,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  1,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION { \
		.combination_board_id = 	7, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E14RO_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_U14RO_ID, \
		.name_length =				13, \
		.combination_name =			"E_14Ro_U_14Ro", \
		.block_count = 				NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION_BLOCK, \
		.features = 				NEURONSPI_BOARD_E14ROU14RO_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E14ROU14RO_HW_COMBINATION[] = {NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION};

// E-16Di_U-14Ro (M203)
#define NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION_BLOCK_SIZE 68
static u32 NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION_BLOCK_SIZE] = {
		0, 35,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 1
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 2
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 3
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 4
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 5
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 6
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 7
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 8
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 9
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 10
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 11
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 12
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 13
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 14
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 15
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 16
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 17
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 18
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 19
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 20
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 21
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 22
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 23
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 24
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 25
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 26
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 27
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 28
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 29
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 30
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 31
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 32
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 33
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 34
		1000, 29, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1015
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1016
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1017
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1018
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1019
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1020
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1021
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1022
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1023
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1024
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1025
		NEURONSPI_REGFUN_DS_ENABLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1026
		NEURONSPI_REGFUN_DS_POLARITY | NEURONSPI_REGFLAG_ACC_1HZ,										// 1027
		NEURONSPI_REGFUN_DS_TOGGLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1028
};

#define NEURONSPI_BOARD_E16DIU14RO_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  14,	\
		.ds_count =					  14,	\
		.di_count =					  16,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  0,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION { \
		.combination_board_id = 	8, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E16DI_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_U14RO_ID, \
		.name_length =				13, \
		.combination_name =			"E_16Di_U_14Ro", \
		.block_count = 				NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E16DIU14RO_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E16DIU14RO_HW_COMBINATION[] = {NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION};

// E-14Ro_U-14Di (L503)
#define NEURONSPI_BOARD_E14ROU14DI_HW_DEFINITION_BLOCK_SIZE 62
static u32 NEURONSPI_BOARD_E14ROU14DI_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E14ROU14DI_HW_DEFINITION_BLOCK_SIZE] = {
		0, 31,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 1
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 2
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 3
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 4
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 5
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 6
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 7
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 8
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 9
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 10
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 11
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 12
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 13
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 14
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 15
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 16
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 17
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 18
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 19
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 20
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 21
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 22
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 23
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 24
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 25
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 26
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 27
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 28
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 29
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 30
		1000, 27, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1015
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1016
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1017
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1018
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1019
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1020
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1021
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1022
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1023
		NEURONSPI_REGFUN_DS_ENABLE | NEURONSPI_REGFLAG_ACC_1HZ,											// 1024
		NEURONSPI_REGFUN_DS_POLARITY | NEURONSPI_REGFLAG_ACC_1HZ,										// 1025
		NEURONSPI_REGFUN_DS_TOGGLE | NEURONSPI_REGFLAG_ACC_1HZ											// 1026
};

#define NEURONSPI_BOARD_E14ROU14DI_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  14,	\
		.ds_count =					  14,	\
		.di_count =					  14,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  0,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E14ROU14DI_HW_DEFINITION { \
		.combination_board_id = 	9, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E14RO_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_U14DI_ID, \
		.name_length =				13, \
		.combination_name =			"E_14Ro_U_14Di", \
		.block_count = 				NEURONSPI_BOARD_E14ROU14DI_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E14ROU14DI_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E14ROU14DI_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E14ROU14DI_HW_COMBINATION[] = {NEURONSPI_BOARD_E14ROU14DI_HW_DEFINITION};


// E-16Di_U-14Di (M303)
#define NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION_BLOCK_SIZE 107
static u32 NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION_BLOCK_SIZE] = {
		0, 63,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 											// 1
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 2
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 3
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 4
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 5
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 6
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 7
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 8
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 9
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 10
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 11
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 12
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 13
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 14
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 15
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 16
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 17
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 18
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 19
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 20
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 21
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 22
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 23
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 24
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 25
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 26
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 27
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 28
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 29
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 30
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 31
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 32
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 33
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 34
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 35
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 36
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 37
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 38
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 39
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 40
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 41
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 42
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 43
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 44
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 45
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 46
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 47
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 48
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 49
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 50
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 51
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 52
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 53
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 54
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 55
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 56
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 57
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 58
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 59
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 60
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 								// 61
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,									// 62
		1000, 40, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1015
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1016
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1017
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1018
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1019
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1020
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1021
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1022
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1023
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1024
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1025
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1026
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1027
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1028
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1029
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1030
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1031
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1032
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1033
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1034
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1035
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1036
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1037
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1038
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1039
};

#define NEURONSPI_BOARD_E16DIU14DI_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  0,	\
		.ds_count =					  0,	\
		.di_count =					  30,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  0,	\
		.sec_ao_count =				  0,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  0,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION { \
		.combination_board_id = 	10, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E16DI_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_U14DI_ID, \
		.name_length =				13, \
		.combination_name =			"E_16Di_U_14Di", \
		.block_count = 				NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E16DIU14DI_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E16DIU14DI_HW_COMBINATION[] = {NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION};

// E-4Ai4Ao
#define NEURONSPI_BOARD_E4AI4AO_HW_DEFINITION_BLOCK_SIZE 15
static u32 NEURONSPI_BOARD_E4AI4AO_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E4AI4AO_HW_DEFINITION_BLOCK_SIZE] = {
		0, 1,	// Register block beginning and size
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 0
		1000, 10, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
};

#define NEURONSPI_BOARD_E4AI4AO_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  0,	\
		.ds_count =					  0,	\
		.di_count =					  0,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  4,	\
		.sec_ao_count =				  4,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  0,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  0,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}


#define NEURONSPI_BOARD_E4AI4AO_HW_DEFINITION { \
		.combination_board_id = 	11, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E4AI4AO_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_NONE_ID, \
		.name_length =				8, \
		.combination_name =			"E_4Ai4Ao", \
		.block_count = 				NEURONSPI_BOARD_E4AI4AO_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E4AI4AO_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E4AI4AO_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E4AI4AO_HW_COMBINATION[] = {NEURONSPI_BOARD_E4AI4AO_HW_DEFINITION};

// E-4Ai4Ao_P-6Di5Ro (xS50)
#define NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_DEFINITION_BLOCK_SIZE 56
static u32 NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_DEFINITION_BLOCK_SIZE] = {
		0, 27,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 												// 1
		NEURONSPI_REGFUN_AO_VER2_RW | NEURONSPI_REGFLAG_ACC_10HZ,											// 2
		NEURONSPI_REGFUN_AO_VER2_RW | NEURONSPI_REGFLAG_ACC_10HZ,											// 3
		NEURONSPI_REGFUN_AO_VER2_RW | NEURONSPI_REGFLAG_ACC_10HZ,											// 4
		NEURONSPI_REGFUN_AO_VER2_RW | NEURONSPI_REGFLAG_ACC_10HZ,											// 5
		NEURONSPI_REGFUN_AI_VER2_READ_LOWER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 6
		NEURONSPI_REGFUN_AI_VER2_READ_UPPER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 7
		NEURONSPI_REGFUN_AI_VER2_READ_LOWER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 8
		NEURONSPI_REGFUN_AI_VER2_READ_UPPER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 9
		NEURONSPI_REGFUN_AI_VER2_READ_LOWER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 10
		NEURONSPI_REGFUN_AI_VER2_READ_UPPER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 11
		NEURONSPI_REGFUN_AI_VER2_READ_LOWER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 12
		NEURONSPI_REGFUN_AI_VER2_READ_UPPER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 13
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC,										 	// 14
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC,	 									// 15
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,										// 16
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 									// 17
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,										// 18
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 									// 19
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,										// 20
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 									// 21
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,										// 22
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 									// 23
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,										// 24
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 									// 25
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,										// 26
		1000, 25, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,										// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 										// 1015
		NEURONSPI_REGFUN_DS_ENABLE   | NEURONSPI_REGFLAG_ACC_1HZ,										// 1016
		NEURONSPI_REGFUN_DS_POLARITY | NEURONSPI_REGFLAG_ACC_1HZ,										// 1017
		NEURONSPI_REGFUN_DS_TOGGLE   | NEURONSPI_REGFLAG_ACC_1HZ,										// 1018
		NEURONSPI_REGFUN_AI_VER2_MODE | NEURONSPI_REGFLAG_ACC_1HZ,										// 1019
		NEURONSPI_REGFUN_AI_VER2_MODE | NEURONSPI_REGFLAG_ACC_1HZ,										// 1020
		NEURONSPI_REGFUN_AI_VER2_MODE | NEURONSPI_REGFLAG_ACC_1HZ,										// 1021
		NEURONSPI_REGFUN_AI_VER2_MODE | NEURONSPI_REGFLAG_ACC_1HZ,										// 1022
		NEURONSPI_REGFUN_RS485_CONFIG | NEURONSPI_REGFLAG_ACC_6SEC,										// 1023
		NEURONSPI_REGFUN_RS485_ADDRESS | NEURONSPI_REGFLAG_ACC_6SEC										// 1024
};

#define NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_FEATURES {	\
		.do_count =					  0,	\
		.ro_count =					  6,	\
		.ds_count =					  5,	\
		.di_count =					  5,	\
		.led_count =				  0,	\
		.stm_ai_count =				  0,	\
		.stm_ao_count =				  0,	\
		.sec_ai_count =				  4,	\
		.sec_ao_count =				  4,	\
		.uart_master_count =		  0,	\
		.uart_slave_count = 		  1,	\
		.pwm_channel_count = 		  0,	\
		.wd_count = 				  1,	\
		.extension_sys_count = 		  1,	\
		.light_count = 				  0,	\
		.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_DEFINITION { \
		.combination_board_id = 	12, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E4AI4AO_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_P6DI5RO_ID, \
		.name_length =				17, \
		.combination_name =			"E_4Ai4Ao_P_6Di5Ro", \
		.block_count = 				NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_COMBINATION[] = {NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_DEFINITION};

// B-485
#define NEURONSPI_BOARD_B485_HW_DEFINITION_BLOCK_SIZE 15
static u32 NEURONSPI_BOARD_B485_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_B485_HW_DEFINITION_BLOCK_SIZE] = {
		0, 1,	// Register block beginning and size
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 0
		1000, 10,
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
};

#define NEURONSPI_BOARD_B485_HW_FEATURES {	\
	.do_count =					  0,	\
	.ro_count =					  0,	\
	.ds_count =					  0,	\
	.di_count =					  0,	\
	.led_count =				  0,	\
	.stm_ai_count =				  0,	\
	.stm_ao_count =				  0,	\
	.sec_ai_count =				  4,	\
	.sec_ao_count =				  4,	\
	.uart_master_count =		  1,	\
	.uart_slave_count = 		  0,	\
	.pwm_channel_count = 		  0,	\
	.wd_count = 				  1,	\
	.extension_sys_count = 		  0,	\
	.light_count = 				  0,	\
	.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_B485_HW_DEFINITION { \
		.combination_board_id = 	13, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_B485_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_NONE_ID, \
		.name_length =				5, \
		.combination_name =			"B_485", \
		.block_count = 				NEURONSPI_BOARD_B485_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_B485_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_B485_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_B485_HW_COMBINATION[] = {NEURONSPI_BOARD_B485_HW_DEFINITION};

// E-4Light (M613)
#define NEURONSPI_BOARD_E4LIGHT_HW_DEFINITION_BLOCK_SIZE 35
static u32 NEURONSPI_BOARD_E4LIGHT_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E4LIGHT_HW_DEFINITION_BLOCK_SIZE] = {
		0, 21,	// Register block beginning and size
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 0
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 1
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 2
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 3
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 4
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 5
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 6
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 7
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 8
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 9
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 10
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 11
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 12
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 13
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 14
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 15
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 16
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 17
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 18
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 19
		NEURONSPI_REGFUN_NONE_TEST | NEURONSPI_REGFLAG_ACC_ONCE,										// 20
		1000, 10,
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,	// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,										// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 											// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1009
};

#define NEURONSPI_BOARD_E4LIGHT_HW_FEATURES {	\
	.do_count =					  0,	\
	.ro_count =					  0,	\
	.ds_count =					  0,	\
	.di_count =					  0,	\
	.led_count =				  0,	\
	.stm_ai_count =				  0,	\
	.stm_ao_count =				  0,	\
	.sec_ai_count =				  0,	\
	.sec_ao_count =				  0,	\
	.uart_master_count =		  0,	\
	.uart_slave_count = 		  0,	\
	.pwm_channel_count = 		  0,	\
	.wd_count = 				  1,	\
	.extension_sys_count = 		  0,	\
	.light_count = 				  4,	\
	.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E4LIGHT_HW_DEFINITION { \
		.combination_board_id = 	14, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E4LIGHT_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_NONE_ID, \
		.name_length =				8, \
		.combination_name =			"E_4Light", \
		.block_count = 				NEURONSPI_BOARD_E4LIGHT_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E4LIGHT_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E4LIGHT_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E4LIGHT_HW_COMBINATION[] = {NEURONSPI_BOARD_E4LIGHT_HW_DEFINITION};

// E-4Ai4Ao_U-6Di5Ro (L503)
#define NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION_BLOCK_SIZE 56
static u32 NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION_BLOCK[NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION_BLOCK_SIZE] = {
		0, 28,	// Register block beginning and size
		NEURONSPI_REGFUN_DI_READ | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY,				// 0
		NEURONSPI_REGFUN_DO_RW | NEURONSPI_REGFLAG_ACC_10HZ, 													// 1
		NEURONSPI_REGFUN_AO_VER2_RW | NEURONSPI_REGFLAG_ACC_AFAP,												// 2
		NEURONSPI_REGFUN_AO_VER2_RW | NEURONSPI_REGFLAG_ACC_AFAP,												// 3
		NEURONSPI_REGFUN_AO_VER2_RW | NEURONSPI_REGFLAG_ACC_AFAP,												// 4
		NEURONSPI_REGFUN_AO_VER2_RW | NEURONSPI_REGFLAG_ACC_AFAP,												// 5
		NEURONSPI_REGFUN_AI_VER2_READ_LOWER | NEURONSPI_REGFLAG_ACC_AFAP, 	// 6
		NEURONSPI_REGFUN_AI_VER2_READ_UPPER | NEURONSPI_REGFLAG_ACC_AFAP, 	// 7
		NEURONSPI_REGFUN_AI_VER2_READ_LOWER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 8
		NEURONSPI_REGFUN_AI_VER2_READ_UPPER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 9
		NEURONSPI_REGFUN_AI_VER2_READ_LOWER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 10
		NEURONSPI_REGFUN_AI_VER2_READ_UPPER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 11
		NEURONSPI_REGFUN_AI_VER2_READ_LOWER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 12
		NEURONSPI_REGFUN_AI_VER2_READ_UPPER | NEURONSPI_REGFLAG_ACC_AFAP | NEURONSPI_REGFLAG_SYS_READ_ONLY, 	// 13
		NEURONSPI_REGFUN_MWD_STATUS | NEURONSPI_REGFLAG_ACC_6SEC | NEURONSPI_REGFLAG_SYS_READ_ONLY, 			// 14
		NEURONSPI_REGFUN_TX_QUEUE_LEN | NEURONSPI_REGFLAG_ACC_10HZ,												// 15
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 										// 16
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,											// 17
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 										// 18
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,											// 19
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 										// 20
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,											// 21
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 										// 22
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,											// 23
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 										// 24
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,											// 25
		NEURONSPI_REGFUN_DI_COUNTER_LOWER | NEURONSPI_REGFLAG_ACC_6SEC, 										// 26
		NEURONSPI_REGFUN_DI_COUNTER_UPPER | NEURONSPI_REGFLAG_ACC_6SEC,											// 27
		1000, 24, // Register block beginning and size
		NEURONSPI_REGFUN_SW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,					// 1000
		NEURONSPI_REGFUN_DIDO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,				// 1001
		NEURONSPI_REGFUN_UAIO_COUNT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,				// 1002
		NEURONSPI_REGFUN_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,					// 1003
		NEURONSPI_REGFUN_FLASH_HW_VER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,			// 1004
		NEURONSPI_REGFUN_SERIAL_NR_LOWER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1005
		NEURONSPI_REGFUN_SERIAL_NR_UPPER | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,		// 1006
		NEURONSPI_REGFUN_INTERRUPTS | NEURONSPI_REGFLAG_ACC_AFAP,												// 1007
		NEURONSPI_REGFUN_MWD_TO | NEURONSPI_REGFLAG_ACC_6SEC, 													// 1008
		NEURONSPI_REGFUN_V_REF_INT | NEURONSPI_REGFLAG_ACC_ONCE | NEURONSPI_REGFLAG_SYS_READ_ONLY,				// 1009
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,												// 1010
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC, 												// 1011
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,												// 1012
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,												// 1013
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,												// 1014
		NEURONSPI_REGFUN_DI_DEBOUNCE | NEURONSPI_REGFLAG_ACC_6SEC,												// 1015
		NEURONSPI_REGFUN_DS_ENABLE | NEURONSPI_REGFLAG_ACC_1HZ,													// 1016
		NEURONSPI_REGFUN_DS_POLARITY | NEURONSPI_REGFLAG_ACC_1HZ,												// 1017
		NEURONSPI_REGFUN_DS_TOGGLE | NEURONSPI_REGFLAG_ACC_1HZ,													// 1018
		NEURONSPI_REGFUN_AI_VER2_MODE | NEURONSPI_REGFLAG_ACC_1HZ,												// 1019
		NEURONSPI_REGFUN_AI_VER2_MODE | NEURONSPI_REGFLAG_ACC_1HZ,												// 1020
		NEURONSPI_REGFUN_AI_VER2_MODE | NEURONSPI_REGFLAG_ACC_1HZ,												// 1021
		NEURONSPI_REGFUN_AI_VER2_MODE | NEURONSPI_REGFLAG_ACC_1HZ,												// 1022
		NEURONSPI_REGFUN_RS485_CONFIG | NEURONSPI_REGFLAG_ACC_6SEC												// 1023
};

#define NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_FEATURES {	\
	.do_count =					  0,	\
	.ro_count =					  5,	\
	.ds_count =					  5,	\
	.di_count =					  6,	\
	.led_count =				  0,	\
	.stm_ai_count =				  0,	\
	.stm_ao_count =				  0,	\
	.sec_ai_count =				  4,	\
	.sec_ao_count =				  4,	\
	.uart_master_count =		  0,	\
	.uart_slave_count = 		  0,	\
	.pwm_channel_count = 		  0,	\
	.wd_count = 				  1,	\
	.extension_sys_count = 		  0,	\
	.light_count = 				  4,	\
	.owire_count =				  0,    \
}

#define NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION { \
		.combination_board_id = 	15, \
		.lower_board_id = 			NEURONSPI_BOARD_LOWER_E4AI4AO_ID, \
		.upper_board_id = 			NEURONSPI_BOARD_UPPER_U6DI5RO_ID, \
		.name_length =				17, \
		.combination_name =			"E_4Ai4Ao_U_6Di5Ro", \
		.block_count = 				NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION_BLOCK_SIZE, \
		.blocks = 					NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION_BLOCK, \
		.features =					NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_FEATURES \
}
static struct neuronspi_board_combination NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_COMBINATION[] = {NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION};

/*********************
 * Model Definitions *
 *********************/

#define NEURONSPI_MODEL_S103_HW_DEFINITION_BOARD_SIZE 1
struct neuronspi_board_combination NEURONSPI_MODEL_S103_HW_DEFINITION_BOARD[NEURONSPI_MODEL_S103_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION
};

#define NEURONSPI_MODEL_S103G_HW_DEFINITION_BOARD_SIZE 1
struct neuronspi_board_combination NEURONSPI_MODEL_S103G_HW_DEFINITION_BOARD[NEURONSPI_MODEL_S103G_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION
};

#define NEURONSPI_MODEL_S103IQ_HW_DEFINITION_BOARD_SIZE 1
struct neuronspi_board_combination NEURONSPI_MODEL_S103IQ_HW_DEFINITION_BOARD[NEURONSPI_MODEL_S103IQ_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION
};

#define NEURONSPI_MODEL_S103EO_HW_DEFINITION_BOARD_SIZE 1
struct neuronspi_board_combination NEURONSPI_MODEL_S103EO_HW_DEFINITION_BOARD[NEURONSPI_MODEL_S103EO_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION
};

#define NEURONSPI_MODEL_M103_HW_DEFINITION_BOARD_SIZE 2
struct neuronspi_board_combination NEURONSPI_MODEL_M103_HW_DEFINITION_BOARD[NEURONSPI_MODEL_M103_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E8DI8RO_HW_DEFINITION
};

#define NEURONSPI_MODEL_M203_HW_DEFINITION_BOARD_SIZE 2
struct neuronspi_board_combination NEURONSPI_MODEL_M203_HW_DEFINITION_BOARD[NEURONSPI_MODEL_M203_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION
};

#define NEURONSPI_MODEL_M303_HW_DEFINITION_BOARD_SIZE 2
struct neuronspi_board_combination NEURONSPI_MODEL_M303_HW_DEFINITION_BOARD[NEURONSPI_MODEL_M303_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION
};

#define NEURONSPI_MODEL_M403_HW_DEFINITION_BOARD_SIZE 2
struct neuronspi_board_combination NEURONSPI_MODEL_M403_HW_DEFINITION_BOARD[NEURONSPI_MODEL_M403_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION
};

#define NEURONSPI_MODEL_M503_HW_DEFINITION_BOARD_SIZE 2
struct neuronspi_board_combination NEURONSPI_MODEL_M503_HW_DEFINITION_BOARD[NEURONSPI_MODEL_M503_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION
};

#define NEURONSPI_MODEL_M603_HW_DEFINITION_BOARD_SIZE 2
struct neuronspi_board_combination NEURONSPI_MODEL_M603_HW_DEFINITION_BOARD[NEURONSPI_MODEL_M603_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E4LIGHT_HW_DEFINITION
};

#define NEURONSPI_MODEL_L203_HW_DEFINITION_BOARD_SIZE 3
struct neuronspi_board_combination NEURONSPI_MODEL_L203_HW_DEFINITION_BOARD[NEURONSPI_MODEL_L203_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION, NEURONSPI_BOARD_E16DIU14RO_HW_DEFINITION
};

#define NEURONSPI_MODEL_L303_HW_DEFINITION_BOARD_SIZE 3
struct neuronspi_board_combination NEURONSPI_MODEL_L303_HW_DEFINITION_BOARD[NEURONSPI_MODEL_L303_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION, NEURONSPI_BOARD_E16DIU14DI_HW_DEFINITION
};

#define NEURONSPI_MODEL_L403_HW_DEFINITION_BOARD_SIZE 3
struct neuronspi_board_combination NEURONSPI_MODEL_L403_HW_DEFINITION_BOARD[NEURONSPI_MODEL_L403_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION, NEURONSPI_BOARD_E14ROU14RO_HW_DEFINITION
};

#define NEURONSPI_MODEL_L503_HW_DEFINITION_BOARD_SIZE 3
struct neuronspi_board_combination NEURONSPI_MODEL_L503_HW_DEFINITION_BOARD[NEURONSPI_MODEL_L503_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION,  NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION, NEURONSPI_BOARD_E14ROU14DI_HW_DEFINITION
};

#define NEURONSPI_MODEL_L513_HW_DEFINITION_BOARD_SIZE 3
struct neuronspi_board_combination NEURONSPI_MODEL_L513_HW_DEFINITION_BOARD[NEURONSPI_MODEL_L513_HW_DEFINITION_BOARD_SIZE] = {
		NEURONSPI_BOARD_B1000_HW_DEFINITION, NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION, NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_DEFINITION
};

// Board table
// Column 4 is the number of 0-indexed registers and column 5 is the number of 1000-indexed ones
#define NEURONSPI_BOARDTABLE_LEN		16
static struct neuronspi_board_entry NEURONSPI_BOARDTABLE[NEURONSPI_BOARDTABLE_LEN] = {
	{.index = 0, .lower_board_id = NEURONSPI_BOARD_LOWER_B1000_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_NONE_ID,
			.data_register_count = 21,	.config_register_count = 32, .definition = NEURONSPI_BOARD_B1000_HW_COMBINATION}, 	// B_1000 (S103)
	{.index = 1, .lower_board_id = NEURONSPI_BOARD_LOWER_E8DI8RO_ID,	.upper_board_id = NEURONSPI_BOARD_UPPER_NONE_ID,
			.data_register_count = 19,	.config_register_count = 21, .definition = NEURONSPI_BOARD_E8DI8RO_HW_COMBINATION},	// E-8Di8Ro (M103)
	{.index = 2, .lower_board_id = NEURONSPI_BOARD_LOWER_E14RO_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_NONE_ID,
			.data_register_count = 1,	.config_register_count = 0,  .definition = NEURONSPI_BOARD_E14RO_HW_COMBINATION},		// E-14Ro
	{.index = 3, .lower_board_id = NEURONSPI_BOARD_LOWER_E16DI_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_NONE_ID,
			.data_register_count = 1,	.config_register_count = 0,	 .definition = NEURONSPI_BOARD_E16DI_HW_COMBINATION},		// E-16Di
	{.index = 4, .lower_board_id = NEURONSPI_BOARD_LOWER_E8DI8RO_ID,	.upper_board_id = NEURONSPI_BOARD_UPPER_P11DIR485_ID,
			.data_register_count = 36,	.config_register_count = 31,  .definition = NEURONSPI_BOARD_E8DI8ROP11DIR485_HW_COMBINATION},	// E-8Di8Ro_P-11DiR485 (xS10)
	{.index = 5, .lower_board_id = NEURONSPI_BOARD_LOWER_E14RO_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_P11DIR485_ID,
			.data_register_count = 20,	.config_register_count = 23,  .definition = NEURONSPI_BOARD_E14ROP11DIR485_HW_COMBINATION},	// E-14Ro_P-11DiR485 (xS40)
	{.index = 6, .lower_board_id = NEURONSPI_BOARD_LOWER_E16DI_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_P11DIR485_ID,
			.data_register_count = 52,	.config_register_count = 36,  .definition = NEURONSPI_BOARD_E16DIP11DIR485_HW_COMBINATION},	// E-16Di_P-11DiR485 (xS30)
	{.index = 7, .lower_board_id = NEURONSPI_BOARD_LOWER_E14RO_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_U14RO_ID,
			.data_register_count = 3,	.config_register_count = 10,  .definition = NEURONSPI_BOARD_E14ROU14RO_HW_COMBINATION},	// E-14Ro_U-14Ro (M403)
	{.index = 8, .lower_board_id = NEURONSPI_BOARD_LOWER_E16DI_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_U14RO_ID,
			.data_register_count = 35,	.config_register_count = 29,  .definition = NEURONSPI_BOARD_E16DIU14RO_HW_COMBINATION},	// E-16Di_U-14Ro (M203)
	{.index = 9, .lower_board_id = NEURONSPI_BOARD_LOWER_E14RO_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_U14DI_ID,
			.data_register_count = 31,	.config_register_count = 27,  .definition = NEURONSPI_BOARD_E14ROU14DI_HW_COMBINATION},	// E-14Ro_U-14Di (L503)
	{.index = 10, .lower_board_id = NEURONSPI_BOARD_LOWER_E16DI_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_U14DI_ID,
			.data_register_count = 63, .config_register_count = 40,   .definition = NEURONSPI_BOARD_E16DIU14DI_HW_COMBINATION},	// E-16Di_U-14Di (M303)
	{.index = 11, .lower_board_id = NEURONSPI_BOARD_LOWER_E4AI4AO_ID,	.upper_board_id = NEURONSPI_BOARD_UPPER_NONE_ID,
			.data_register_count = 1,	.config_register_count = 0,   .definition = NEURONSPI_BOARD_E4AI4AO_HW_COMBINATION},		// E-4Ai4Ao
	{.index = 12, .lower_board_id = NEURONSPI_BOARD_LOWER_E4AI4AO_ID,	.upper_board_id = NEURONSPI_BOARD_UPPER_P6DI5RO_ID,
			.data_register_count = 27, .config_register_count = 25,	  .definition = NEURONSPI_BOARD_E4AI4AOP6DI5RO_HW_COMBINATION},	// E-4Ai4Ao_P-6Di5Ro (xS50)
	{.index = 13, .lower_board_id = NEURONSPI_BOARD_LOWER_B485_ID,		.upper_board_id = NEURONSPI_BOARD_UPPER_NONE_ID,
			.data_register_count = 1,  .config_register_count = 0,	  .definition = NEURONSPI_BOARD_B485_HW_COMBINATION},		// B-485
	{.index = 14, .lower_board_id = NEURONSPI_BOARD_LOWER_E4LIGHT_ID,	.upper_board_id = NEURONSPI_BOARD_UPPER_NONE_ID,
			.data_register_count = 21, .config_register_count = 8,    .definition = NEURONSPI_BOARD_E4LIGHT_HW_COMBINATION},		// E-4Light (M603)
	{.index = 15, .lower_board_id = NEURONSPI_BOARD_LOWER_E4AI4AO_ID,	.upper_board_id = NEURONSPI_BOARD_UPPER_U6DI5RO_ID,
			.data_register_count = 28, .config_register_count = 24,   .definition = NEURONSPI_BOARD_E4AI4AOU6DI5RO_HW_COMBINATION}		// E-4Ai4Ao_U-6Di5Ro (M503)
};

// Module table
#define NEURONSPI_MODELTABLE_LEN		15
static struct neuronspi_model_definition NEURONSPI_MODELTABLE[NEURONSPI_MODELTABLE_LEN] = {
		{.eeprom_length = 4, .eeprom_name = "S103", .name_length = 4, .model_name = "S103",
				.combination_count = 1, .combinations = NEURONSPI_MODEL_S103_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "S103", .name_length = 6, .model_name = "S103-G",
				.combination_count = 1, .combinations = NEURONSPI_MODEL_S103G_HW_DEFINITION_BOARD},
		{.eeprom_length = 6, .eeprom_name = "S103IQ", .name_length = 7, .model_name = "S103-IQ",
				.combination_count = 1, .combinations = NEURONSPI_MODEL_S103IQ_HW_DEFINITION_BOARD},
		{.eeprom_length = 6, .eeprom_name = "S103EO", .name_length = 7, .model_name = "S103-EO",
				.combination_count = 1, .combinations = NEURONSPI_MODEL_S103EO_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "M103", .name_length = 4, .model_name = "M103",
				.combination_count = 2, .combinations = NEURONSPI_MODEL_M103_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "M203", .name_length = 4, .model_name = "M203",
				.combination_count = 2, .combinations = NEURONSPI_MODEL_M203_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "M303", .name_length = 4, .model_name = "M303",
				.combination_count = 2, .combinations = NEURONSPI_MODEL_M303_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "M403", .name_length = 4, .model_name = "M403",
				.combination_count = 2, .combinations = NEURONSPI_MODEL_M403_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "M503", .name_length = 4, .model_name = "M503",
				.combination_count = 2, .combinations = NEURONSPI_MODEL_M503_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "M603", .name_length = 4, .model_name = "M603",
				.combination_count = 2, .combinations = NEURONSPI_MODEL_M603_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "L203", .name_length = 4, .model_name = "L203",
				.combination_count = 3, .combinations = NEURONSPI_MODEL_L203_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "L303", .name_length = 4, .model_name = "L303",
				.combination_count = 3, .combinations = NEURONSPI_MODEL_L303_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "L403", .name_length = 4, .model_name = "L403",
				.combination_count = 3, .combinations = NEURONSPI_MODEL_L403_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "L503", .name_length = 4, .model_name = "L503",
				.combination_count = 3, .combinations = NEURONSPI_MODEL_L503_HW_DEFINITION_BOARD},
		{.eeprom_length = 4, .eeprom_name = "L513", .name_length = 4, .model_name = "L513",
				.combination_count = 3, .combinations = NEURONSPI_MODEL_L513_HW_DEFINITION_BOARD}
};


/********************
 * Module Constants *
 ********************/

static const struct of_device_id neuronspi_id_match[] = {
		{.compatible = "unipi,neuron"},
		{.compatible = NEURON_DEVICE_NAME},
		{}
};
MODULE_DEVICE_TABLE(of, neuronspi_id_match);

#define NEURON_INT_RX_NOT_EMPTY 			0x1
#define NEURON_INT_TX_FINISHED  			0x2
#define NEURON_INT_RX_MODBUS    			0x4
#define NEURON_INT_DI_CHANGED   			0x8
#define NEURON_INT_ID_MASK      			0x0f
#define NEURON_INT_NO_INT_BIT   			0x0f

#define NEURONSPI_RECONF_MD					(1 << 0)
#define NEURONSPI_RECONF_IER				(1 << 1)
#define NEURONSPI_RECONF_RS485				(1 << 2)

#define MODBUS_FIRST_DATA_BYTE				10

#define MODBUS_MAX_READ_BITS                2000
#define MODBUS_MAX_WRITE_BITS               1968
#define MODBUS_MAX_READ_REGISTERS           125
#define MODBUS_MAX_WRITE_REGISTERS          123
#define MODBUS_MAX_WR_WRITE_REGISTERS       121
#define MODBUS_MAX_WR_READ_REGISTERS        125

/*******************
 * Data structures *
 *******************/

enum neuron_str_attribute_type {
		NEURON_SATTR_MODEL,
		NEURON_SATTR_EEPROM,
		NEURON_SATTR_BOARD_NAME,
		NEURON_SATTR_GPIO_GROUP_NAME
};

enum neuron_num_attribute_type {
		NEURON_NATTR_BOARDCOUNT,
		NEURON_NATTR_MODE,
		NEURON_NATTR_CURRENT_VALUE
};

struct neuronspi_devtype
{
	u8	name[10];
	int32_t	nr_gpio;
	int32_t	nr_uart;
};

struct neuronspi_port
{
	struct uart_port			port;
	u8							line;
	struct kthread_work			tx_work;
	struct kthread_work			rx_work;
	struct kthread_work			irq_work;
	u32							flags;
	u8							ier_clear;
	u8							buf[NEURONSPI_FIFO_SIZE];
	struct neuronspi_uart_data 	*parent;
	u8							dev_index;
	u8							dev_port;
	u8							parmrk_enabled;
	u64							parmrk_frame_delay;
};

struct neuronspi_uart_data
{
	const struct neuronspi_devtype	*devtype;
	struct kthread_worker			kworker;
	struct task_struct				*kworker_task;
	struct neuronspi_port			*p;
	u8								p_count;
};

static struct neuronspi_uart_data* neuronspi_uart_glob_data;

static unsigned long neuronspi_lines;

static struct uart_driver* neuronspi_uart;

// Instantiated once
struct neuronspi_char_driver
{
	int32_t major_number;
	u8 *message;
	u16 message_size;
	u32 open_counter;
	struct class* driver_class;
	struct device* dev;
};


// Instantiated once per SPI device
struct neuronspi_driver_data
{
	struct spi_driver *spi_driver;
	struct neuronspi_char_driver *char_driver;
	struct uart_driver *serial_driver;
	struct neuronspi_uart_data *uart_data;
	struct neuronspi_led_driver *led_driver;
	struct neuronspi_di_driver **di_driver;
	struct neuronspi_do_driver **do_driver;
	struct neuronspi_ro_driver **ro_driver;
	struct platform_device *board_device;
	struct iio_dev *stm_ai_driver;
	struct iio_dev *stm_ao_driver;
	struct iio_dev **sec_ai_driver;
	struct iio_dev **sec_ao_driver;
	struct kthread_worker primary_worker;
	struct task_struct *primary_worker_task;
	struct regmap *reg_map;
	struct task_struct *poll_thread;
	struct mutex device_lock;
	struct neuronspi_board_features *features;
	struct neuronspi_board_regstart_table *regstart_table;
	struct spinlock sysfs_regmap_lock;
	char platform_name[sizeof("io_group0")];
	u8 *send_buf;
	u8 *recv_buf;
	u8 *first_probe_reply;
	u8 *second_probe_reply;
	u8 reserved_device;
	u8 uart_count;
	u8 uart_read;
	u8 *uart_buf;
	u8 slower_model;
	u8 no_irq;
	u8 lower_board_id;
	u8 upper_board_id;
	u8 combination_id;
	int32_t neuron_index;
	uint16_t sysfs_regmap_target;
	uint16_t sysfs_counter_target;
	uint32_t ideal_frequency;
};

struct neuronspi_di_driver {
	struct spi_device* spi;
	struct gpio_chip gpio_c;
	struct platform_device *plat_dev;
	u8 di_index;
	char name[sizeof("di_0_00")];
};

struct neuronspi_do_driver
{
	struct spi_device* spi;
	struct gpio_chip gpio_c;
	struct platform_device *plat_dev;
	u8 do_index;
	char name[sizeof("do_0_00")];
};

struct neuronspi_ro_driver
{
	struct spi_device* spi;
	struct gpio_chip gpio_c;
	struct platform_device *plat_dev;
	u8 ro_index;
	char name[sizeof("ro_0_00")];
};

struct neuronspi_sec_ai_driver
{
	struct iio *devices;
	u16 dev_count;
};

struct neuronspi_sec_ao_driver
{
	struct iio *devices;
	u16 dev_count;
};

struct neuronspi_stm_ai_data
{
	u32 mode;
	struct spi_device *parent;
};

struct neuronspi_stm_ao_data
{
	u32 mode;
	struct spi_device *parent;
};

struct neuronspi_sec_ai_data
{
	u32 index;
	u32 mode;
	struct spi_device *parent;
};

struct neuronspi_sec_ao_data
{
	u32 index;
	u32 mode;
	struct spi_device *parent;
};

// Instantiated once per LED
struct neuronspi_led_driver
{
	struct led_classdev	ldev;
	struct spi_device	*spi;
	struct kthread_work	led_work;
	int					id;
	int					brightness;
	char				name[sizeof("neuron:green:uled-x1")];
	spinlock_t			lock;
};

struct mutex neuronspi_master_mutex;

struct neuronspi_file_data
{
	struct spi_device** spi_device;
	struct mutex 		lock;
	u8 					*send_buf;
	u8 					*recv_buf;
	uint32_t			message_len;
};

struct neuronspi_direct_acc
{
	void __iomem		*vaddr;
	u32					size;
};

static struct neuronspi_char_driver neuronspi_cdrv =
{
	.dev = NULL
};

/*************
 * Functions *
 *************/

static int neuronspi_open (struct inode *, struct file *);
static int neuronspi_release (struct inode *, struct file *);
static ssize_t neuronspi_read (struct file *, char *, size_t, loff_t *);
static ssize_t neuronspi_write (struct file *, const char *, size_t, loff_t *);
static int32_t char_register_driver(void);
static int32_t char_unregister_driver(void);

static int neuronspi_create_reg_starts(struct neuronspi_board_regstart_table *out_table, struct neuronspi_board_combination *board);
static int32_t neuronspi_find_reg_start(struct neuronspi_board_combination *board, uint16_t regfun);
static int32_t neuronspi_find_model_id(uint32_t probe_count);

int neuronspi_iio_stm_ai_read_raw(struct iio_dev *iio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
int neuronspi_iio_stm_ao_read_raw(struct iio_dev *iio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
int neuronspi_iio_stm_ao_write_raw(struct iio_dev *indio_dev, struct iio_chan_spec const *chan, int val, int val2, long mask);
int neuronspi_iio_sec_ai_read_raw(struct iio_dev *iio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
int neuronspi_iio_sec_ao_write_raw(struct iio_dev *indio_dev, struct iio_chan_spec const *chan, int val, int val2, long mask);

static irqreturn_t neuronspi_spi_irq(int32_t irq, void *dev_id);
static int32_t neuronspi_spi_probe(struct spi_device *spi);
static int32_t neuronspi_spi_remove(struct spi_device *spi);
void neuronspi_spi_send_message(struct spi_device *spi_dev, u8 *send_buf, u8 *recv_buf, int32_t len, int32_t freq, int32_t delay, int32_t send_header);
static uint16_t neuronspi_spi_crc(u8* inputstring, int32_t length, uint16_t initval);
static int32_t neuronspi_spi_uart_write(struct spi_device *spi, u8 *send_buf, u8 length, u8 uart_index);
void neuronspi_spi_uart_read(struct spi_device* spi_dev, u8 *send_buf, u8 *recv_buf, int32_t len, u8 uart_index);
void neuronspi_spi_set_irqs(struct spi_device* spi_dev, uint16_t to);
void neuronspi_spi_led_set_brightness(struct spi_device* spi_dev, enum led_brightness brightness, int id);
void neuronspi_spi_iio_stm_ai_read_voltage(struct iio_dev *iio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
void neuronspi_spi_iio_stm_ai_read_current(struct iio_dev *iio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
void neuronspi_spi_iio_stm_ao_read_resistance(struct iio_dev *indio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
void neuronspi_spi_iio_stm_ao_set_voltage(struct iio_dev *indio_dev, struct iio_chan_spec const *chan, int val, int val2, long mask);
void neuronspi_spi_iio_stm_ao_set_current(struct iio_dev *indio_dev, struct iio_chan_spec const *chan, int val, int val2, long mask);
void neuronspi_spi_iio_sec_ai_read_voltage(struct iio_dev *iio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
void neuronspi_spi_iio_sec_ai_read_current(struct iio_dev *iio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
void neuronspi_spi_iio_sec_ai_read_resistance(struct iio_dev *iio_dev, struct iio_chan_spec const *ch, int *val, int *val2, long mask);
void neuronspi_spi_iio_sec_ao_set_voltage(struct iio_dev *indio_dev, struct iio_chan_spec const *chan, int val, int val2, long mask);
int neuronspi_spi_gpio_do_set(struct spi_device* spi_dev, uint32_t id, int value);
int neuronspi_spi_gpio_ro_set(struct spi_device* spi_dev, uint32_t id, int value);
int neuronspi_spi_gpio_di_get(struct spi_device* spi_dev, uint32_t id);

static void neuronspi_uart_start_tx(struct uart_port *port);
static void neuronspi_uart_stop_tx(struct uart_port *port);
static void neuronspi_uart_stop_rx(struct uart_port *port);
static void neuronspi_uart_set_termios(struct uart_port *port, struct ktermios *termios, struct ktermios *old);
static uint32_t neuronspi_uart_tx_empty(struct uart_port *port);
static void neuronspi_uart_break_ctl(struct uart_port *port, int break_state);
static void neuronspi_uart_shutdown(struct uart_port *port);
static int32_t neuronspi_uart_startup(struct uart_port *port);
static int32_t neuronspi_uart_request_port(struct uart_port *port);
static int32_t neuronspi_uart_alloc_line(void);
static void neuronspi_uart_set_mctrl(struct uart_port *port, uint32_t mctrl);
int	neuronspi_uart_ioctl (struct uart_port *port, unsigned int ioctl_code, unsigned long ioctl_arg);
static void neuronspi_uart_set_ldisc(struct uart_port *port, struct ktermios *kterm);
static uint32_t neuronspi_uart_get_mctrl(struct uart_port *port);
static const char *neuronspi_uart_type(struct uart_port *port);
static void neuronspi_uart_null_void(struct uart_port *port);
static void neuronspi_uart_config_port(struct uart_port *port, int flags);
static int32_t neuronspi_uart_verify_port(struct uart_port *port, struct serial_struct *s);
static void neuronspi_uart_pm(struct uart_port *port, uint32_t state,  uint32_t oldstate);
static int32_t neuronspi_uart_poll(void *data);
static int32_t neuronspi_uart_probe(struct spi_device* dev, u8 device_index);
static int32_t neuronspi_uart_remove(struct neuronspi_uart_data *u_data);
static void neuronspi_uart_power(struct uart_port *port, int32_t on);
static int32_t neuronspi_uart_config_rs485(struct uart_port *port, struct serial_rs485 *rs485);
void neuronspi_spi_uart_set_cflag(struct spi_device* spi_dev, u8 port, uint32_t to);
uint32_t neuronspi_spi_uart_get_cflag(struct spi_device* spi_dev, u8 port);

static void neuronspi_uart_fifo_write(struct neuronspi_port *port, u8 to_send);
static void neuronspi_uart_fifo_read(struct uart_port *port, uint32_t rxlen);

static void neuronspi_uart_rx_proc(struct kthread_work *ws);
static void neuronspi_uart_tx_proc(struct kthread_work *ws);
static void neuronspi_uart_ist(struct kthread_work *ws);
static void neuronspi_uart_handle_tx(struct neuronspi_port *port);
static void neuronspi_uart_handle_rx(struct neuronspi_port *port, uint32_t rxlen, uint32_t iir);
static void neuronspi_uart_handle_irq(struct neuronspi_uart_data *uart_data, int32_t portno);

int neuronspi_gpio_di_direction_input(struct gpio_chip *chip, unsigned offset);
int neuronspi_gpio_di_direction_output(struct gpio_chip *chip, unsigned offset, int value);
int	neuronspi_gpio_di_get(struct gpio_chip *chip, unsigned offset);
int neuronspi_gpio_do_direction_input(struct gpio_chip *chip, unsigned offset);
int neuronspi_gpio_do_direction_output(struct gpio_chip *chip, unsigned offset, int value);
void neuronspi_gpio_do_set(struct gpio_chip *chip, unsigned offset, int value);
int neuronspi_gpio_ro_direction_input(struct gpio_chip *chip, unsigned offset);
int neuronspi_gpio_ro_direction_output(struct gpio_chip *chip, unsigned offset, int value);
void neuronspi_gpio_ro_set(struct gpio_chip *chip, unsigned offset, int value);

static void neuronspi_led_set_brightness(struct led_classdev *ldev, enum led_brightness brightness);

static ssize_t neuronspi_iio_show_primary_ai_mode(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_iio_store_primary_ai_mode(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_iio_show_primary_ao_mode(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_iio_store_primary_ao_mode(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_iio_show_secondary_ai_mode(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_iio_store_secondary_ai_mode(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_iio_show_secondary_ao_mode(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_iio_store_secondary_ao_mode(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);

static ssize_t neuronspi_show_model(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_show_eeprom(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_show_regmap(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_store_regmap(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_show_serial(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_show_board(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_show_lboard_id(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_show_uboard_id(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_show_hw_version(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_show_hw_flash_version(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_show_fw_version(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_show_uart_queue_length(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_show_uart_config(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_store_uart_config(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_show_watchdog_status(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_store_watchdog_status(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_show_watchdog_timeout(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_store_watchdog_timeout(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_show_pwm_freq(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_store_pwm_freq(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_di_show_counter(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_di_store_counter(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_di_show_debounce(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_di_store_debounce(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_show_pwm_cycle(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_store_pwm_cycle(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_show_pwm_presc(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_store_pwm_presc(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_store_ds_enable(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_store_ds_toggle(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_store_ds_polarity(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_show_ds_enable(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_ds_toggle(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_ds_polarity(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_do_prefix(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_do_base(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_do_count(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_di_prefix(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_di_base(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_di_count(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_ro_prefix(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_ro_base(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_show_ro_count(struct device *dev, struct device_attribute *attr, char *buf);

static ssize_t neuronspi_spi_gpio_di_show_value(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_do_show_value(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_do_store_value(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);
static ssize_t neuronspi_spi_gpio_ro_show_value(struct device *dev, struct device_attribute *attr, char *buf);
static ssize_t neuronspi_spi_gpio_ro_store_value(struct device *dev, struct device_attribute *attr, const char *buf, size_t count);

int neuronspi_regmap_hw_gather_write(void *context, const void *reg, size_t reg_size, const void *val, size_t val_size);
int neuronspi_regmap_hw_read(void *context, const void *reg_buf, size_t reg_size, void *val_buf, size_t val_size);
int neuronspi_regmap_hw_reg_read(void *context, unsigned int reg, unsigned int *val);
int neuronspi_regmap_hw_reg_write(void *context, unsigned int reg, unsigned int val);
int neuronspi_regmap_hw_write(void *context, const void *data, size_t count);

static void neuronspi_regmap_invalidate_device(struct regmap *reg_map, struct neuronspi_board_combination *device_def, uint32_t period_counter);
static int32_t neuronspi_regmap_invalidate(void *data);

static struct spinlock* neuronspi_spi_w_spinlock;
static u8 neuronspi_spi_w_flag = 1;
static u8 neuronspi_probe_count = 0;
static int neuronspi_model_id = -1;
static spinlock_t neuronspi_probe_spinlock;
static struct spi_device* neuronspi_s_dev[NEURONSPI_MAX_DEVS];
static struct task_struct *neuronspi_invalidate_thread;

int neuronspi_spi_gpio_di_get(struct spi_device* spi_dev, uint32_t id);

/***********************
 * Function structures *
 ***********************/

// Host driver struct
static struct spi_driver neuronspi_spi_driver =
{
	.driver =
	{
		.name			= NEURON_DRIVER_NAME,
		.of_match_table	= of_match_ptr(neuronspi_id_match)
	},
	.probe				= neuronspi_spi_probe,
	.remove				= neuronspi_spi_remove,
};

static struct file_operations file_ops =
{
	.open 				= neuronspi_open,
	.read 				= neuronspi_read,
	.write 				= neuronspi_write,
	.release 			= neuronspi_release,
	.owner				= THIS_MODULE
};

static const struct uart_ops neuronspi_uart_ops =
{
	.tx_empty			= neuronspi_uart_tx_empty,
	.set_mctrl			= neuronspi_uart_set_mctrl,
	.get_mctrl			= neuronspi_uart_get_mctrl,
	.stop_tx			= neuronspi_uart_stop_tx,
	.start_tx			= neuronspi_uart_start_tx,
	.stop_rx			= neuronspi_uart_stop_rx,
	.break_ctl			= neuronspi_uart_break_ctl,
	.startup			= neuronspi_uart_startup,
	.shutdown			= neuronspi_uart_shutdown,
	.set_termios		= neuronspi_uart_set_termios,
	.set_ldisc			= neuronspi_uart_set_ldisc,
	.type				= neuronspi_uart_type,
	.request_port		= neuronspi_uart_request_port,
	.release_port		= neuronspi_uart_null_void,
	.config_port		= neuronspi_uart_config_port,
	.verify_port		= neuronspi_uart_verify_port,
	.pm					= neuronspi_uart_pm,
	.ioctl				= neuronspi_uart_ioctl,
};

static const struct regmap_bus neuronspi_regmap_bus =
{
	.fast_io 					= 1,
	.write 						= neuronspi_regmap_hw_write,
	.gather_write 				= neuronspi_regmap_hw_gather_write,
	.reg_write					= neuronspi_regmap_hw_reg_write,
	.read						= neuronspi_regmap_hw_read,
	.reg_read					= neuronspi_regmap_hw_reg_read,
	.reg_format_endian_default  = REGMAP_ENDIAN_NATIVE,
	.val_format_endian_default  = REGMAP_ENDIAN_NATIVE,
	.max_raw_read				= 200,								// CRC and other overhead not included
	.max_raw_write				= 200,								// CRC and other overhead not included
};

static const struct regmap_config neuronspi_regmap_config_default =
{
		.name 					= "Neuronspi Regmap",
		.reg_bits				= 16,
		.reg_stride				= 0,
		.pad_bits				= 0,
		.val_bits				= 16,
		.max_register			= 65535,
		.cache_type				= REGCACHE_RBTREE,
		.use_single_rw			= 0,
		.can_multi_write		= 1,
};

static const struct iio_chan_spec neuronspi_stm_ai_chan_spec[] = {
	{
			.type = IIO_VOLTAGE,
			.indexed = 1,
			.channel = 0,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 0
	},
	{
			.type = IIO_CURRENT,
			.indexed = 1,
			.channel = 1,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 0
	}
};

static const struct iio_chan_spec neuronspi_stm_ao_chan_spec[] = {
	{
			.type = IIO_VOLTAGE,
			.indexed = 1,
			.channel = 0,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 1
	},
	{
			.type = IIO_CURRENT,
			.indexed = 1,
			.channel = 1,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 1
	},
	{
			.type = IIO_RESISTANCE,
			.indexed = 1,
			.channel = 2,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 0
	}
};

static const struct iio_chan_spec neuronspi_sec_ai_chan_spec[] = {
	{
			.type = IIO_VOLTAGE,
			.indexed = 1,
			.channel = 0,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 0
	},
	{
			.type = IIO_CURRENT,
			.indexed = 1,
			.channel = 1,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 0
	},
	{
			.type = IIO_RESISTANCE,
			.indexed = 1,
			.channel = 2,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 0
	}
};

static const struct iio_chan_spec neuronspi_sec_ao_chan_spec[] = {
	{
			.type = IIO_VOLTAGE,
			.indexed = 1,
			.channel = 0,
			.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
			.output = 1
	}
};

static DEVICE_ATTR(model_name, 0440, neuronspi_show_model, NULL);
static DEVICE_ATTR(sys_eeprom_name, 0440, neuronspi_show_eeprom, NULL);
static DEVICE_ATTR(register_read, 0660, neuronspi_show_regmap, neuronspi_store_regmap);
static DEVICE_ATTR(sys_board_serial, 0440, neuronspi_spi_show_serial, NULL);
static DEVICE_ATTR(sys_board_name, 0440, neuronspi_spi_show_board, NULL);
static DEVICE_ATTR(sys_primary_major_id, 0440, neuronspi_spi_show_lboard_id, NULL);
static DEVICE_ATTR(sys_secondary_major_id, 0440, neuronspi_spi_show_uboard_id, NULL);
static DEVICE_ATTR(sys_primary_minor_id, 0440, neuronspi_spi_show_hw_version, NULL);
static DEVICE_ATTR(sys_secondary_minor_id, 0440, neuronspi_spi_show_hw_flash_version, NULL);
static DEVICE_ATTR(firmware_version, 0440, neuronspi_spi_show_fw_version, NULL);
static DEVICE_ATTR(watchdog_status, 0660, neuronspi_spi_show_watchdog_status, neuronspi_spi_store_watchdog_status);
static DEVICE_ATTR(watchdog_timeout, 0660, neuronspi_spi_show_watchdog_timeout, neuronspi_spi_store_watchdog_timeout);
static DEVICE_ATTR(sys_gpio_do_count, 0440, neuronspi_spi_gpio_show_do_count, NULL);
static DEVICE_ATTR(sys_gpio_do_prefix, 0440, neuronspi_spi_gpio_show_do_prefix, NULL);
static DEVICE_ATTR(sys_gpio_do_base, 0440, neuronspi_spi_gpio_show_do_base, NULL);
static DEVICE_ATTR(sys_gpio_di_count, 0440, neuronspi_spi_gpio_show_di_count, NULL);
static DEVICE_ATTR(sys_gpio_di_prefix, 0440, neuronspi_spi_gpio_show_di_prefix, NULL);
static DEVICE_ATTR(ro_value, 0660, neuronspi_spi_gpio_ro_show_value, neuronspi_spi_gpio_ro_store_value);
static DEVICE_ATTR(do_value, 0660, neuronspi_spi_gpio_do_show_value, neuronspi_spi_gpio_do_store_value);
static DEVICE_ATTR(counter, 0660, neuronspi_spi_gpio_di_show_counter, neuronspi_spi_gpio_di_store_counter);
static DEVICE_ATTR(debounce, 0660, neuronspi_spi_gpio_di_show_debounce, neuronspi_spi_gpio_di_store_debounce);
static DEVICE_ATTR(di_value, 0440, neuronspi_spi_gpio_di_show_value, NULL);
static DEVICE_ATTR(direct_switch_enable, 0660, neuronspi_spi_gpio_show_ds_enable, neuronspi_spi_gpio_store_ds_enable);
static DEVICE_ATTR(direct_switch_toggle, 0660, neuronspi_spi_gpio_show_ds_toggle, neuronspi_spi_gpio_store_ds_toggle);
static DEVICE_ATTR(direct_switch_polarity, 0660, neuronspi_spi_gpio_show_ds_polarity, neuronspi_spi_gpio_store_ds_polarity);
static DEVICE_ATTR(pwm_frequency_cycle, 0660, neuronspi_spi_gpio_show_pwm_freq, neuronspi_spi_gpio_store_pwm_freq);
static DEVICE_ATTR(pwm_prescale, 0660, neuronspi_spi_gpio_show_pwm_presc, neuronspi_spi_gpio_store_pwm_presc);
static DEVICE_ATTR(pwm_duty_cycle, 0660, neuronspi_spi_gpio_show_pwm_cycle, neuronspi_spi_gpio_store_pwm_cycle);
static DEVICE_ATTR(uart_queue_length, 0440, neuronspi_spi_show_uart_queue_length, NULL);
static DEVICE_ATTR(uart_config, 0660, neuronspi_spi_show_uart_config, neuronspi_spi_store_uart_config);
static DEVICE_ATTR(sys_gpio_di_base, 0440, neuronspi_spi_gpio_show_di_base, NULL);
static DEVICE_ATTR(sys_gpio_ro_count, 0440, neuronspi_spi_gpio_show_ro_count, NULL);
static DEVICE_ATTR(sys_gpio_ro_prefix, 0440, neuronspi_spi_gpio_show_ro_prefix, NULL);
static DEVICE_ATTR(sys_gpio_ro_base, 0440, neuronspi_spi_gpio_show_ro_base, NULL);
static DEVICE_ATTR(mode_ai_type_a, 0660, neuronspi_iio_show_primary_ai_mode, neuronspi_iio_store_primary_ai_mode);
static DEVICE_ATTR(mode_ao_type_a, 0660, neuronspi_iio_show_primary_ao_mode, neuronspi_iio_store_primary_ao_mode);
static DEVICE_ATTR(mode_ai_type_b, 0660, neuronspi_iio_show_secondary_ai_mode, neuronspi_iio_store_secondary_ai_mode);
static DEVICE_ATTR(mode_ao_type_b, 0660, neuronspi_iio_show_secondary_ao_mode, neuronspi_iio_store_secondary_ao_mode);

static struct attribute *neuron_plc_attrs[] = {
		&dev_attr_model_name.attr,
		&dev_attr_sys_eeprom_name.attr,
		NULL,
};

static struct attribute *neuron_board_attrs[] = {
		&dev_attr_sys_board_name.attr,
		&dev_attr_sys_primary_major_id.attr,
		&dev_attr_sys_secondary_major_id.attr,
		&dev_attr_sys_primary_minor_id.attr,
		&dev_attr_sys_secondary_minor_id.attr,
		&dev_attr_firmware_version.attr,
		&dev_attr_watchdog_status.attr,
		&dev_attr_watchdog_timeout.attr,
		&dev_attr_sys_board_serial.attr,
		&dev_attr_uart_queue_length.attr,
		&dev_attr_uart_config.attr,
		&dev_attr_register_read.attr,
		NULL,
};

static struct attribute *neuron_gpio_di_attrs[] = {
		&dev_attr_sys_gpio_di_count.attr,
		&dev_attr_sys_gpio_di_prefix.attr,
		&dev_attr_sys_gpio_di_base.attr,
		&dev_attr_direct_switch_enable.attr,
		&dev_attr_direct_switch_toggle.attr,
		&dev_attr_direct_switch_polarity.attr,
		&dev_attr_di_value.attr,
		&dev_attr_counter.attr,
		&dev_attr_debounce.attr,
		NULL,
};

static struct attribute *neuron_gpio_do_attrs[] = {
		&dev_attr_sys_gpio_do_count.attr,
		&dev_attr_sys_gpio_do_prefix.attr,
		&dev_attr_sys_gpio_do_base.attr,
		&dev_attr_pwm_frequency_cycle.attr,
		&dev_attr_pwm_prescale.attr,
		&dev_attr_pwm_duty_cycle.attr,
		&dev_attr_do_value.attr,
		NULL,
};

static struct attribute *neuron_gpio_ro_attrs[] = {
		&dev_attr_sys_gpio_ro_count.attr,
		&dev_attr_sys_gpio_ro_prefix.attr,
		&dev_attr_sys_gpio_ro_base.attr,
		&dev_attr_ro_value.attr,
		NULL,
};

static struct attribute *neuron_stm_ai_attrs[] = {
		&dev_attr_mode_ai_type_a.attr,
		NULL,
};

static struct attribute *neuron_stm_ao_attrs[] = {
		&dev_attr_mode_ao_type_a.attr,
		NULL,
};

static struct attribute *neuron_sec_ai_attrs[] = {
		&dev_attr_mode_ai_type_b.attr,
		NULL,
};

static struct attribute *neuron_sec_ao_attrs[] = {
		&dev_attr_mode_ao_type_b.attr,
		NULL,
};

static struct attribute_group neuron_plc_attr_group = {
	.attrs = neuron_plc_attrs,
};

static struct attribute_group neuron_board_attr_group = {
	.attrs = neuron_board_attrs,
};

static struct attribute_group neuron_gpio_di_attr_group = {
	.attrs = neuron_gpio_di_attrs,
};

static struct attribute_group neuron_gpio_do_attr_group = {
	.attrs = neuron_gpio_do_attrs,
};

static struct attribute_group neuron_gpio_ro_attr_group = {
	.attrs = neuron_gpio_ro_attrs,
};

static struct attribute_group neuron_stm_ai_group = {
	.attrs = neuron_stm_ai_attrs,
};

static struct attribute_group neuron_stm_ao_group = {
	.attrs = neuron_stm_ao_attrs,
};

static struct attribute_group neuron_sec_ai_group = {
	.attrs = neuron_sec_ai_attrs,
};

static struct attribute_group neuron_sec_ao_group = {
	.attrs = neuron_sec_ao_attrs,
};

static const struct attribute_group *neuron_plc_attr_groups[] = {
	&neuron_plc_attr_group,
	NULL,
};

static const struct attribute_group *neuron_board_attr_groups[] = {
	&neuron_board_attr_group,
	NULL,
};

static const struct attribute_group *neuron_gpio_di_attr_groups[] = {
	&neuron_gpio_di_attr_group,
	NULL,
};

static const struct attribute_group *neuron_gpio_do_attr_groups[] = {
	&neuron_gpio_do_attr_group,
	NULL,
};

static const struct attribute_group *neuron_gpio_ro_attr_groups[] = {
	&neuron_gpio_ro_attr_group,
	NULL,
};

static struct platform_device *neuron_plc_dev;

static const struct iio_info neuronspi_stm_ai_info = {
	.read_raw = neuronspi_iio_stm_ai_read_raw,
	.driver_module = THIS_MODULE,
	.attrs = &neuron_stm_ai_group,
};

static const struct iio_info neuronspi_stm_ao_info = {
	.read_raw = neuronspi_iio_stm_ao_read_raw,
	.write_raw = neuronspi_iio_stm_ao_write_raw,
	.driver_module = THIS_MODULE,
	.attrs = &neuron_stm_ao_group,
};

static const struct iio_info neuronspi_sec_ai_info = {
	.read_raw = neuronspi_iio_sec_ai_read_raw,
	.driver_module = THIS_MODULE,
	.attrs = &neuron_sec_ai_group,
};

static const struct iio_info neuronspi_sec_ao_info = {
	.write_raw = neuronspi_iio_sec_ao_write_raw,
	.driver_module = THIS_MODULE,
	.attrs = &neuron_sec_ao_group,
};

// These defines need to be at the end
#define to_neuronspi_uart_data(p,e)  ((container_of((p), struct neuronspi_uart_data, e)))
#define to_neuronspi_port(p,e)	((container_of((p), struct neuronspi_port, e)))
#define to_led_driver(p,e)	((container_of((p), struct neuronspi_led_driver, e)))
#define to_uart_port(p,e)	((container_of((p), struct uart_port, e)))


/***********************
 * Inline Functions    *
 ***********************/

__always_inline uint16_t neuronspi_spi_crc(u8* inputstring, int32_t length, uint16_t initval)
{
    int32_t i;
    uint16_t result = initval;
    for (i=0; i<length; i++) {
        result = (result >> 8) ^ NEURONSPI_CRC16TABLE[(result ^ inputstring[i]) & 0xff];
    }
    return result;
}

__always_inline size_t neuronspi_spi_compose_single_coil_write(uint16_t start, uint8_t **buf_inp, uint8_t **buf_outp, uint8_t data)
{
	uint16_t crc1;
	*buf_outp = kzalloc(6, GFP_KERNEL);
	*buf_inp = kzalloc(6, GFP_KERNEL);
	(*buf_inp)[0] = 0x05;
	(*buf_inp)[1] = data;
	(*buf_inp)[2] = start & 0xFF;
	(*buf_inp)[3] = start >> 8;
	crc1 = neuronspi_spi_crc(*buf_inp, 4, 0);
	memcpy(&(*buf_inp)[4], &crc1, 2);
	return 6;
}

__always_inline size_t neuronspi_spi_compose_single_coil_read(uint16_t start, uint8_t **buf_inp, uint8_t **buf_outp)
{
	uint16_t crc1, crc2;
	*buf_outp = kzalloc(14, GFP_KERNEL);
	*buf_inp = kzalloc(14, GFP_KERNEL);
	(*buf_inp)[0] = 0x01;
	(*buf_inp)[1] = 0x06;
	(*buf_inp)[2] = start & 0xFF;
	(*buf_inp)[3] = start >> 8;
	crc1 = neuronspi_spi_crc(*buf_inp, 4, 0);
	memcpy(&(*buf_inp)[4], &crc1, 2);
	memcpy(&(*buf_inp)[6], *buf_inp, 4);
	crc2 = neuronspi_spi_crc(&(*buf_inp)[6], 6, crc1);
	memcpy(&(*buf_inp)[12], &crc2, 2);
	return 14;
}

__always_inline size_t neuronspi_spi_compose_multiple_coil_write(uint8_t number, uint16_t start, uint8_t **buf_inp, uint8_t **buf_outp, uint8_t *data)
{
	uint16_t crc1, crc2;
	*buf_outp = kzalloc(12 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number), GFP_KERNEL);
	*buf_inp = kzalloc(12 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number), GFP_KERNEL);
	(*buf_inp)[0] = 0x0F;
	(*buf_inp)[1] = 4 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number);
	(*buf_inp)[2] = start & 0xFF;
	(*buf_inp)[3] = start >> 8;
	crc1 = neuronspi_spi_crc(*buf_inp, 4, 0);
	memcpy(&(*buf_inp)[4], &crc1, 2);
	memcpy(&(*buf_inp)[6], *buf_inp, 4);
	(*buf_inp)[7] = number;
	memcpy(&(*buf_inp)[10], data, NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number));
	crc2 = neuronspi_spi_crc(&(*buf_inp)[6], 4 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number), crc1);
	memcpy(&(*buf_inp)[10 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number)], &crc2, 2);
	return 12 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number);
}

__always_inline size_t neuronspi_spi_compose_multiple_coil_read(uint8_t number, uint16_t start, uint8_t **buf_inp, uint8_t **buf_outp)
{
	uint16_t crc1, crc2;
	*buf_outp = kzalloc(12 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number), GFP_KERNEL);
	*buf_inp = kzalloc(12 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number), GFP_KERNEL);
	(*buf_inp)[0] = 0x01;
	(*buf_inp)[1] = 4 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number);
	(*buf_inp)[2] = start & 0xFF;
	(*buf_inp)[3] = start >> 8;
	crc1 = neuronspi_spi_crc(*buf_inp, 4, 0);
	memcpy(&(*buf_inp)[4], &crc1, 2);
	memcpy(&(*buf_inp)[6], *buf_inp, 4);
	crc2 = neuronspi_spi_crc(&(*buf_inp)[6], 4 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number), crc1);
	memcpy(&(*buf_inp)[10 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number)], &crc2, 2);
	return 12 + NEURONSPI_GET_COIL_READ_PHASE2_BYTE_LENGTH(number);
}

__always_inline size_t neuronspi_spi_compose_single_register_write(uint16_t start, uint8_t **buf_inp, uint8_t **buf_outp, uint16_t data)
{
	uint16_t crc1, crc2;
	*buf_outp = kzalloc(14, GFP_KERNEL);
	*buf_inp = kzalloc(14, GFP_KERNEL);
	(*buf_inp)[0] = 0x06;
	(*buf_inp)[1] = 0x06;
	(*buf_inp)[2] = start & 0xFF;
	(*buf_inp)[3] = start >> 8;
	printk(KERN_INFO "NEURONSPI: COMPOSE SINGLE WRITE DATA: %x\n", data);
	crc1 = neuronspi_spi_crc(*buf_inp, 4, 0);
	memcpy(&(*buf_inp)[4], &crc1, 2);
	memcpy(&(*buf_inp)[6], *buf_inp, 4);
	(*buf_inp)[7] = 0x01;
	memcpy(&(*buf_inp)[10], &data, 2);
	crc2 = neuronspi_spi_crc(&(*buf_inp)[6], 6, crc1);
	memcpy(&(*buf_inp)[12], &crc2, 2);
	return 14;
}

__always_inline size_t neuronspi_spi_compose_single_register_read(uint16_t start, uint8_t **buf_inp, uint8_t **buf_outp)
{
	uint16_t crc1, crc2;
	*buf_outp = kzalloc(14, GFP_KERNEL);
	*buf_inp = kzalloc(14, GFP_KERNEL);
	(*buf_inp)[0] = 0x03;
	(*buf_inp)[1] = 0x06;
	(*buf_inp)[2] = start & 0xFF;
	(*buf_inp)[3] = start >> 8;
	crc1 = neuronspi_spi_crc(*buf_inp, 4, 0);
	memcpy(&(*buf_inp)[4], &crc1, 2);
	memcpy(&(*buf_inp)[6], *buf_inp, 4);
	(*buf_inp)[7] = 0x01;
	crc2 = neuronspi_spi_crc(&(*buf_inp)[6], 6, crc1);
	memcpy(&(*buf_inp)[12], &crc2, 2);
	return 14;
}

__always_inline size_t neuronspi_spi_compose_multiple_register_write(uint8_t number, uint16_t start, uint8_t **buf_inp, uint8_t **buf_outp, uint8_t *data)
{
	uint16_t crc1, crc2;
	*buf_outp = kzalloc(12 + (number * 2), GFP_KERNEL);
	*buf_inp = kzalloc(12 + (number * 2), GFP_KERNEL);
	(*buf_inp)[0] = 0x10;
	(*buf_inp)[1] = 4 + (number * 2);
	(*buf_inp)[2] = start & 0xFF;
	(*buf_inp)[3] = start >> 8;
	crc1 = neuronspi_spi_crc(*buf_inp, 4, 0);
	memcpy(&(*buf_inp)[4], &crc1, 2);
	memcpy(&(*buf_inp)[6], *buf_inp, 4);
	(*buf_inp)[7] = number;
	memcpy(&(*buf_inp)[10], data, number * 2);
	crc2 = neuronspi_spi_crc(&(*buf_inp)[6], 4 + (number * 2), crc1);
	memcpy(&(*buf_inp)[10 + (number * 2)], &crc2, 2);
	return 12 + (number * 2);
}

__always_inline size_t neuronspi_spi_compose_multiple_register_read(uint8_t number, uint16_t start, uint8_t **buf_inp, uint8_t **buf_outp)
{
	uint16_t crc1, crc2;
	*buf_outp = kzalloc(12 + (number * 2), GFP_KERNEL);
	*buf_inp = kzalloc(12 + (number * 2), GFP_KERNEL);
	(*buf_inp)[0] = 0x03;
	(*buf_inp)[1] = 4 + (number * 2);
	(*buf_inp)[2] = start & 0xFF;
	(*buf_inp)[3] = start >> 8;
	crc1 = neuronspi_spi_crc(*buf_inp, 4, 0);
	memcpy(&(*buf_inp)[4], &crc1, 2);
	memcpy(&(*buf_inp)[6], *buf_inp, 4);
	(*buf_inp)[7] = number;
	crc2 = neuronspi_spi_crc(&(*buf_inp)[6], 4 + (number * 2), crc1);
	memcpy(&(*buf_inp)[10 + (number * 2)], &crc2, 2);
	return 12 + (number * 2);
}

#endif /* NEURONSPI_H_ */
